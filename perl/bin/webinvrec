#!/opt/kronometrix/perl/bin/perl

# Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use File::Temp qw(tempfile);
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use POSIX qw(pause);
use Tie::IxHash;

###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hlvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [interval [count]],
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

###  Variables
my $loop = 0;                        # current loop number
$main::opt_h = 0;                    # help option
$main::opt_V = 0;                    # revision option
my $cfile = 'webrec.json';           # configuration file
my $cdata;                           # configuration data
my $tcpka = 0;                       # transport TCP keepalive settings
my $tp = 0;                          # time precision
my $kfile     = 'kronometrix.json';  # configuration file
my $rawfile;                         # krd raw data file
my $kdata;                           # configuration data
my ($baselog, $curlog, $wlog, $log); # logs
local $| = 1;


### MAIN BODY #

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

# osname
my $osname = "$^O";

# read configuration
$cdata = open_config($cfile);

# workloads
tie my %work, "Tie::IxHash";
%work = get_workload($cdata);

# speedup option, default 1hr
my $boot    = 60;             # we speedup 60 times 60sec
my $speedup = 1;              # default on
my $defint  = $interval;      # we save the original interval

my $rawkrd;
# logging option
if ($logging) {

    if ( $speedup == 1 ) { rstimer($boot); }

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rawfile = $curlog . '/' . 'webinvrec' . '.krd';
    $wlog = $baselog . "/webinvrec.log";
    $log = open_file($wlog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

# get it as verbose
if($verbose) {
    if ($logging) {
        write_log ("Total workload requests: " . keys(%work));
    } else {
        print "Total workload requests: " . keys(%work) . ".\n";
    }    
}


# main loop
while (1) {

    if ($logging) {
        $rawkrd = open_file($rawfile);
    }

    for my $key (keys %work) {
        my $value = $work{$key};
        putraw ($key, $value);
    }

    if ($logging) {
        close ($rawkrd);
    }

    ### Check for end
    last if ++$loop == $loop_max;

    ### Check for speedup
    if ( $speedup > 0 ) {
        if ( $speedup == $boot ) {
            rstimer($defint);
            $speedup = -1;
        } else { $speedup++; }
    }

    ### Check for speedup
    if ( $speedup > 0 ) {
        if ( $speedup == $boot ) {
            rstimer($defint);
            $speedup = -1;
        } else { $speedup++; }
    }

    ### Interval
    pause;
}



### Subroutines

## configuration file

# open JSON configuration file
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}

# write config file
sub write_config {

    my ( $conf, $perl_data ) = @_;

    # JSON Object
    my $json_data = JSON->new->utf8->pretty->encode($perl_data);

    # we will parse now the file
    if ( defined $ENV{'KRMX_PREFIX'} ) {
        if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
            open my $fh, ">", "$ENV{'KRMX_PREFIX'}/etc/$conf.tmp";

            # print $fh encode_json($data);
            print $fh $json_data;
            close $fh;
            move(
                "$ENV{'KRMX_PREFIX'}/etc/$conf.tmp",
                "$ENV{'KRMX_PREFIX'}/etc/$conf"
            ) or die "Error: cannot update $conf: $!";

        }
        else {
            print "error: write_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
            usage();
        }
    }
    else {
        if ( -e "/opt/kronometrix/etc/$conf" ) {
            open my $fh, ">", "/opt/kronometrix/etc/$conf.tmp";
            print $fh $json_data;
            close $fh;
            move( "/opt/kronometrix/etc/$conf.tmp", "/opt/kronometrix/etc/$conf" )
              or die "Error: cannot update $conf: $!";
        }
        else {
            print "error: write_config - $! /opt/kronometrix/etc/$conf \n";
            usage();
        }
    }
}

# reload configuration
sub reload_config {

    write_log("info: main - signal HUP received, reload armed...");

    $cdata = open_config($cfile);

    ## hostid
    get_hostid($cdata);

    ## appliance destination
    %work = get_workload($cdata);

    return;
}


# get workloads defintion
sub get_workload {

    my ($data) = @_;
    tie my %sites, "Tie::IxHash";

    my @temp = @{ $data->{'workloads'} };

    my $k=0;
    foreach my $f (@temp) {

        my $name = $f->{'name'};
        my $icao = $f->{'zone'};

        my @reqs = @{ $f->{'requests'} };

        my $hvalue;
        foreach my $req (@reqs) {
            my $id  = $req -> {'id'};
            my $scm = $req -> {'scheme'};

            #print "$name:$id => $scm\n";
            my $keyapp;

            if ($name) {
                $keyapp = $name;
                if ( $k > 0 ) {
                    $hvalue = $hvalue . ' ' . $id . "_" . $scm;
                } else {
                    $hvalue = $name . ':' . $icao . ':' . $id . "_" . $scm;
                }
            } else {
                $keyapp = $id;
                $hvalue = $id . ':' . $icao . ':' . 'system' . "_" . $scm;
            }
            $k++;

            $sites{$keyapp} = $hvalue;
        }

        $k=0;
    }

    return %sites;
}


#
sub putraw {

    my ( $sitename, $inventory ) = @_;

    if ($logging) {
        printf $rawkrd "%.${tp}f:%s:%s\n",
                time, $sitename, $inventory;
    } else {
        printf "%.${tp}f:%s:%s\n",
                time, $sitename, $inventory;
    }
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


sub rstimer {

    my ($lt) = @_;
    my $fint = $lt;
    setitimer( ITIMER_REAL, $fint, $lt );
    return;
}


# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: webinvrec [-hlvV] | [interval]
OPTIONS:
  -h        : help information
  -l        : log raw data to krd file, no STDOUT
  -v        : verbose information
  -V        : release version
  interval  : maximum number of seconds between samples

 FIELDS:
  #01 timestamp : seconds since Epoch, time
  #02 request   : the request name, string
  #03 siteid    : the site-id for request, string
  #04 zone      : location, can be ICAO code, geo lat/lon, address, string
  #05 protocol  : request protocol type, string

END
    exit 0;
}

# revision - print revision and exit
sub revision {
    print STDERR <<END;
webinvrec: 1.2.0, 2021-03-30 1450
END
    exit 0;
}
