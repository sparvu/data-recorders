#!/opt/kronometrix/perl/bin/perl

#  Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
#  Initial Author: Stefan Parvu
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Getopt::Std;
use Date::Calc qw{:all};
use Time::HiRes qw(gettimeofday);
use File::Copy;
use Sys::Hostname;
use File::Basename;
use Digest::SHA;


# Debug Only
# use Data::Dumper;

# Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('chvVnt:q') or usage();
usage() if defined $main::opt_h;
revision() if defined $main::opt_V;
usage() if (($#ARGV+1) >= 1);
my $verbose_flag = defined $main::opt_v ? $main::opt_v : 0;
my $quiet_flag = defined $main::opt_q ? $main::opt_q : 0;
my $null_flag = defined $main::opt_n ? $main::opt_n: 0;
my $clean_flag = defined $main::opt_c ? $main::opt_c: 0;

# Global Vars
my $hport      = 80;                  # HTTP default port
my $osname     = $^O;                 # OS name via Perl
my $tcpka      = 0;                   # TCP KA flag
my $trans_flag = 0;                   # Transport flag, default false
my $ttype;                            # Transport mode
my $krmxcnf    = 'kronometrix.json';  # Main configuration name
$main::opt_h   = 0;                   # help option
$main::opt_V   = 0;                   # revision option
$main::opt_n   = 0;                   # null files option
$main::opt_c   = 0;                   # null files option

my $conf;

local $| = 1;                 # autoflush


# ######### #
# MAIN BODY #
# ######### #

my ($sid, $dr);

#start counting here
my $tstart = gettimeofday();

# check modules
my $argv_flag = 0;
$argv_flag = 1 if (($#ARGV+1) > 0);


# check for transport mode
if (defined $main::opt_t) {
    # check for separator
    usage() if $main::opt_t !~ /(http|ftp)/i;
    $ttype = $main::opt_t;
    $trans_flag = 1;
}

my $host = hostname;
$host =~ s/\..*$// if $host =~ /\./;

my $fbsd_sem = 0;
$fbsd_sem = 1 if  ($osname eq "freebsd");

# read configuration
my $kjson = open_config($krmxcnf);

## hostid
# my $hostid = get_hostid($cdata);

## logs
my ( $baselog, $curlog, $pastlog ) = get_log($kjson);

# Verbose Messages
if ( $verbose_flag == 1 ) {
    print "info: main - recording hostname: $host \n";
    print "info: main - current log dir: $curlog \n";
    print "info: main - daily log dir: $pastlog \n";
}

# check null command option
if ( $null_flag == 1 ) {
    null2krd($baselog, $curlog);
    exit 0;
}

my $yesterday = get_yesterday();

if ( $verbose_flag == 1 ) {
    printf "%s %s\n", "info: main - krd data dir:", $yesterday;
}

# Current to Daily

# FreeBSD cleanup krd routine
my $numkrd;
if ( $fbsd_sem == 1 ) {
    $numkrd = rotate($baselog, $pastlog, $yesterday);
} else {
    $numkrd = rotate($curlog, $pastlog, $yesterday);
}

## Mark End of Time
my $tend = gettimeofday();
my $elapsed = $tend - $tstart;
my $len = length(int($elapsed));

if ($quiet_flag == 0) {
    if ($len > 2) {
        # we are working in minutes
        $elapsed = $elapsed / 60;
        printf "%s %4.2f %s", 
           "All jobs done. Elapsed time:", $elapsed, "minutes\n";
    } else {
        printf "%s %4.2f %s", 
            "All jobs done. Elapsed time:", $elapsed, "seconds\n";
    }
}


## Subroutines

## open JSON configuration file
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


sub get_log {

    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};
    my $dpath = $data->{'log'}->{'daily_path'};

    return ( $bpath, $cpath, $dpath );
}


## get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf("%d-%02d-%02d", $yy, $mm, $dd);

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}


## 
sub rmkrd {
    my ($file) = @_;

    if ( -e $file ) {
        if (unlink($file) > 0) { return 0; } else { return 1; }
    }

    return;
}


## openkrd raw data directory
sub open_krd {

    my ($dir) = @_ ;

    # copy now all raw files into prevdir
    opendir(PREVDAY, "$dir") or
        die "error: openkrd - can't open $dir: $!\n";

    my @krdf = grep {!/^\.+$/} readdir(PREVDAY);
    close(PREVDAY);

    return \@krdf;
}


## tar raw data directory
sub tar_krd {

    my ($dir) = @_;

    require Archive::Tar;

    # Create a new tar object:
    my $tar = Archive::Tar->new();

    my $krdp = open_krd("$dir");

    $dir = dirname($dir);
    chdir "$dir" or
        die "error: tarsdrd - cannot change local directory: $!\n";

    foreach my $krd (@$krdp) {
        next if $krd !~ /.*\.krd\.0\.gz$/;
        my $krdf = $yesterday . '/' . $krd;
        $tar->add_files($krdf);
    }

    # Tar sdrd files
    my $krdtar = '/var/tmp/krd.' . $sid . '.' . $host . '.tar';

    $tar->write($krdtar);

    return $krdtar;
}


## null the raw data
sub null2krd {

    my($blog, $clog ) = @_;

    opendir(DIR, $clog) or
        die "error: null2krd - Can't open $clog: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my @krds;
    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd$/;
        push @krds, $krd;
    }

    foreach my $krdf (@krds) {
        copy("$clog/$krdf", "$blog") or
           die "error: null2krd cannot copy krd file: $krdf $!\n";
         open my $fh, ">", "$clog/$krdf";
         close $fh;
    }

    return;
}



## rotate raw data
sub rotate {

    my($rawdir, $dailydir, $pdir) = @_;

    opendir(DIR, $rawdir) or
        die "error: rotate - Can't open $rawdir: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$pdir";

    my @krd_files;

    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd\.0\.gz$/;
        push @krd_files, $krd;
    }

    if ($verbose_flag == 1) {
        printf "%s %d\n", 
               "info: rotate - copying krd data files:", $#krd_files +1;
    }

    my $cnt = 0;
    # check if we have anything to move to daily
    if (($#krd_files+1) > 0) {
   
        # make daily target dir
        unless(mkdir $dest) {
            die "error: rotate - cannot create dest $pdir, already exists\n";
        }

        foreach my $dir (@krd_files) {
            move("$rawdir/$dir","$dest") or
                die "error: rotate - copying previous daily data, $!\n";
            $cnt++;
        }
    }

    # clean for old krd zero files
    if ( $clean_flag == 1 ) {
        # self check in case you work in current_log
        # do not remove current hot krd files
        if ($rawdir eq $baselog) {
            foreach my $krdf (@files) {
                next if $krdf !~ /.*\.krd$/;
                rmkrd "$rawdir/$krdf";
            }
        }
    }

    # return number of raw krd files moved to daily
    return $cnt;
}


## usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: raw2day [-n] [-chV] [-t ftp|http]
  e.g. raw2day         rotate raw data to daily log
       raw2day -n      copy krd files to base and null originals
       raw2day -c      rotate and clean base
END
    exit 0;
}


## revision - print revision and exit
sub revision {
    print STDERR <<END;
raw2day: 1.1.3, 2016-12-12 1740
END
    exit 0;
}
