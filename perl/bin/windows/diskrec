#
# Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

package PerlSvc;

use strict;
use warnings;
use Getopt::Long;
use Date::Calc qw(:all);
use File::Copy;
use Time::HiRes qw(time gettimeofday usleep tv_interval);
use Win32::OLE ('in');
use Sys::Hostname;
use Time::Local;
use Win32::Process;
use JSON;

# Debug Only
# use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";

my $recid   = 'diskrec';
my $key     = 'Name';
my $cprefix = 'C:\\Program Files\\Kronometrix\\etc';
my ( $l, $v, $h, $V ) = 0;
our %Config = ( ServiceName => $recid );

Getopt::Long::Configure('bundling');
my $result = GetOptions(
    "l|logging" => \$l,
    "v|verbose" => \$v,
    "h|help"    => \$h,
    "V|version" => \$V,
    "n|name=s"  => \$Config{ServiceName}
);

usage() if ( defined $h || !$result );
revision() if ( defined $V );

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $diskwmi = 'Win32_PerfRawData_PerfDisk_LogicalDisk';
my $loop    = 0;                                          # current loop number
my $cf      = 'kronometrix.json';                         # default json config
my $logtime = '0000';                                     # min time check 23:59
my $stime;                                                # sleep timer
my $last_time = 0;                                        # first counter
$| = 1;                                                   # autoflush

my $verbose = defined $v ? $v : 0;
my $logging = defined $l ? $l : 0;

### MAIN BODY

my $curentProcess;

my $pid = Win32::Process::GetCurrentProcessID();

if ( Win32::Process::Open( $curentProcess, $pid, 0 ) ) {
    $curentProcess->SetPriorityClass(HIGH_PRIORITY_CLASS);
}

# read configuration
my $cdata = open_config($cf);

my ( $blog, $clog, $dlog ) = get_log($cdata);

my $fname = $blog . "\\" . $recid . ".log";
my $fkrd  = $clog . "\\" . $recid . ".krd";

# log, rawlog files
my ( $log, $rawlog );

if ($logging) {
    $rawlog = open_file($fkrd);
    $log    = open_file($fname);
    write_log("info: started");
}

# get stats
my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
  or die "Cannot initialize WMI interface\n";

## disk
my @diskstats = qw(
  DiskReadsPerSec        DiskReadBytesPerSec
  PercentDiskReadTime    AvgDiskSecPerRead
  DiskWritesPerSec       DiskWriteBytesPerSec
  PercentDiskWriteTime   AvgDiskSecPerWrite
  CurrentDiskQueueLength AvgDiskQueueLength
  PercentDiskTime        DiskTransfersPerSec
  DiskBytesPerSec        Freemegabytes
  Timestamp_PerfTime     Frequency_PerfTime
  Frequency_Sys100NS     Timestamp_Sys100NS
);

my @filter = ( 'Harddisk', '_Total' );

my $disk_old = {};
my $list;

# pre-init all default
init_disk();

unless ( defined &ContinueRun ) {
    *ContinueRun      = sub { return 1 };
    *RunningAsService = sub { return 0 };
    Interactive();
}

if ( RunningAsService() ) {

    # get service sample interval
    $interval = get_ssi($cdata);
    $loop_max = 2**32;

    $rawlog = open_file($fkrd);
    $log    = open_file($fname);

    write_log("info: started");
}

### SUBROUTINES

sub Startup {

    while ( ContinueRun() ) {

        k_sleep();

        #my $s1 = [gettimeofday];

        my %dstat;

        my ( $di, $dkey );

        # my %diskname = get_disk();

        my $l;

        # metrics
        my (
            $reads,   $rkbytes,  $rbusypct, $rtime, $writes,
            $wkbytes, $wbusypct, $wtime,    $cql,   $aql,
            $busypct, $iops,     $rwkbytes
        );

        my ( $lsize, $lfree, $lfreepct, $usedpct );

        my $disk = {};

        $list = $wmi->InstancesOf($diskwmi)
          or die "Failed to get $diskwmi instance object\n";

        foreach my $v ( in $list) {

            next if $v->{$key} =~ m/\\/;

            if ( !grep { $v->{$key} =~ /$_/i } @filter ) {

                map { $disk->{ $v->{$key} }->{$_} = $v->{$_} } @diskstats;
            }
        }

        for my $k ( keys %$disk ) {

            my $dn = $k;
            $dn =~ s/\://;
            $dn =~ s/\s+//;
            my $diskname = "disk" . $dn;

            #PERF_COUNTER_COUNTER
            $reads = sprintf( "%.2f",
                get_diff( $disk_old->{"$k"}, $disk->{"$k"}, 'DiskReadsPerSec' )
            );

            #PERF_COUNTER_BULK_COUNT
            $rkbytes = sprintf(
                "%.2f",
                get_diff( $disk_old->{"$k"}, $disk->{"$k"},
                    'DiskReadBytesPerSec' ) / 1024
            );

            # PERF_PRECISION_100NS_TIMER
            $rbusypct = sprintf(
                "%.2f",
                get_pct(
                    $disk_old->{"$k"}, $disk->{"$k"}, 'PercentDiskReadTime'
                )
            );

            # PERF_AVERAGE_TIMER
            #$rtime = sprintf("%.2f", get_avg( $disk_old->{"$k"},
            #                                  $disk->{"$k"},
            #                                  'AvgDiskSecPerRead') );

            #PERF_COUNTER_COUNTER
            $writes = sprintf(
                "%.2f",
                get_diff(
                    $disk_old->{"$k"}, $disk->{"$k"}, 'DiskWritesPerSec'
                )
            );

            #PERF_COUNTER_BULK_COUNT
            $wkbytes = sprintf(
                "%.2f",
                get_diff(
                    $disk_old->{"$k"}, $disk->{"$k"},
                    'DiskWriteBytesPerSec'
                ) / 1024
            );

            # PERF_PRECISION_100NS_TIME
            $wbusypct = sprintf(
                "%.2f",
                get_pct(
                    $disk_old->{"$k"}, $disk->{"$k"},
                    'PercentDiskWriteTime'
                )
            );

            # PERF_AVERAGE_TIMER
            #$wtime = sprintf("%.2f", get_avg( $disk_old->{"$k"},
            #                                  $disk->{"$k"},
            #                                  'AvgDiskSecPerWrite') );

            # PERF_COUNTER_RAWCOUNT
            $cql = sprintf( "%.2f", $disk->{"$k"}->{'CurrentDiskQueueLength'} );

            # PERF_COUNTER_100NS_QUEUELEN_TYPE
            $aql = 0;

            # PERF_PRECISION_100NS_TIMER
            $busypct = sprintf( "%.2f",
                get_pct( $disk_old->{"$k"}, $disk->{"$k"}, 'PercentDiskTime' )
            );

            #PERF_COUNTER_COUNTER
            $iops = sprintf(
                "%.2f",
                get_diff(
                    $disk_old->{"$k"}, $disk->{"$k"}, 'DiskTransfersPerSec'
                )
            );

            #PERF_COUNTER_BULK_COUNT
            $rwkbytes = sprintf( "%.2f",
                get_diff( $disk_old->{"$k"}, $disk->{"$k"}, 'DiskBytesPerSec' )
                  / 1024 );

            # Inventory data
            my $wdinv =
              $wmi->ExecQuery(
                "SELECT Size from Win32_LogicalDisk where Name='$k'");

            foreach my $obj ( in $wdinv) {
                $lsize =
                  sprintf( "%.2f", $obj->{Size} / ( 1024 * 1024 * 1024 ) );
            }

            eval {
                $lfree =
                  sprintf( "%.2f", $disk->{"$k"}->{'Freemegabytes'} / 1024 );
                $usedpct =
                  sprintf( "%.2f", 100 - ( 100 * ( $lfree / $lsize ) ) );
            };

            if ($@) {
                write_log("$@");
                write_log("size=|$lsize| free=|$lfree| used=|$usedpct|");
            }

            $dstat{$k} =
"$diskname:$reads:$rkbytes:$rbusypct:$writes:$wkbytes:$wbusypct:$cql:$aql:$busypct:$iops:$rwkbytes:$lsize:$lfree:$usedpct";

        }

        $disk_old = $disk;

        #my $e1 = [gettimeofday];
        #my $delta1 = tv_interval ($s1, $e1);
        #print " disk processing took: $delta1\n";

        # end payload
        my $tnow = [gettimeofday];

        # cktime for rotation
        if ( RunningAsService() ) {
            cktime();
        }

        if ( $last_time > 0 ) {

            putraw( $$tnow[0], %dstat );
            $last_time = $$tnow[0];

        }
        else {

            putraw( $$tnow[0], %dstat );

            if ( !RunningAsService() ) {

                # check count, interval
                last if ++$loop == $loop_max;
            }

            $last_time = $$tnow[0];
            next;
        }

        if ( !RunningAsService() ) {

            # check count, interval
            last if ++$loop == $loop_max;
        }

    }    # while loop

    if ( RunningAsService() ) {
        write_log("info: stopped");
    }
}

sub Interactive {

    Install();

    if ( ( !defined $h ) and ( !defined $V ) ) {
        Startup();
    }
}

sub Install {

    if ( RunningAsService() ) {

        # check for proper config file
        if ( !defined $cdata ) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }

        if ( !defined $clog ) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }
    }

    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
    $Config{Description} = "Kronometrix $recid Service";

    return;
}

sub Remove {

    $Config{ServiceName} = $recid;
    return;
}

# k_sleep - sleeps exact number of usec
#
sub k_sleep {

    my $t     = [gettimeofday];
    my $next  = ( int( $t->[0] / $interval ) + 1 ) * $interval;
    my $delta = tv_interval( $t, [ $next, 0 ] );
    usleep( $delta * 1_000_000 );

    return;
}

sub init_disk {

    $list = $wmi->InstancesOf($diskwmi)
      or die "Failed to get $diskwmi instance object\n";

    foreach my $v ( in $list) {

        next if $v->{$key} =~ m/\\/;

        if ( !grep { $v->{$key} =~ /$_/i } @filter ) {

            map { $disk_old->{ $v->{$key} }->{$_} = $v->{$_} } @diskstats;
        }
    }
}

# get_disk -- get disks, logic drive
#
sub get_disk {

    my %disk;

    # get physical disks
    my ( $di, $dd );
    my $wd = $wmi->InstancesOf("Win32_DiskDrive");

    foreach my $disk ( in $wd) {

        $di = $disk->{Index};
        $dd = $disk->{DeviceID};
        $dd =~ s/\\/\\\\/sg;

        my $qpart =
            'ASSOCIATORS OF '
          . '{Win32_DiskDrive.DeviceID="'
          . $dd
          . '"} WHERE AssocClass = Win32_DiskDriveToDiskPartition';

        my $wpart = $wmi->ExecQuery($qpart);

        foreach my $obj ( in $wpart) {

            my $d1 = $obj->{DeviceID};

            my $wdrive = $wmi->ExecQuery(
"ASSOCIATORS OF {Win32_DiskPartition.DeviceID=\"$d1\"} WHERE AssocClass = Win32_LogicalDiskToPartition"
            );

            foreach my $lobj ( in $wdrive) {
                my $lid = $lobj->{DeviceID};
                my $lv  = $lid =~ s/\://r;
                $lv = $di . $lv;
                $disk{$lv} = "$lid";
            }
        }
    }

    return %disk;
}

# get_diff - get delta between samples as a difference
#
sub get_diff {

    my $h1    = shift;
    my $h2    = shift;
    my $p     = shift;
    my $delta = 0;
    my $tf    = 0;

    # timestamp
    my $t2 = $h2->{'Timestamp_PerfTime'};
    my $t1 = $h1->{'Timestamp_PerfTime'};

    # data
    my $v2 = $h2->{$p};
    my $v1 = $h1->{$p};
    $delta = $v2 - $v1;

    # frequency
    my $td = $t2 - $t1;
    my $f2 = $h2->{'Frequency_PerfTime'};

    my $r;
    eval {
        $tf = $td / $f2;
        $r  = $delta / $tf;
    };

    if ($@) {
        chomp($@);
        write_log("$@");
        write_log("v2=$v2 v1=$v1 t2=$t2 t1=$t1");
    }

    $r = 0 if $r < 0;

    # result
    return $r;
}

# get_pct - get delta between samples as a percentage
#
sub get_pct {

    my $h1 = shift;
    my $h2 = shift;
    my $p  = shift;

    my $v2 = $h2->{$p};
    my $v1 = $h1->{$p};
    my $d  = $v2 - $v1;

    # timestamp
    my $t2 = $h2->{'Timestamp_Sys100NS'};
    my $t1 = $h1->{'Timestamp_Sys100NS'};
    my $td = $t2 - $t1;

    my $r;

    eval { $r = $d / $td; };

    if ($@) {
        chomp($@);
        write_log("$@");
        write_log("v2=$v2 v1=$v1 t2=$t2 t1=$t1");
    }

    return $r;
}

# get_avg - get the average time it takes to complete an IO
#
sub get_avg {

    my $h1    = shift;
    my $h2    = shift;
    my $p     = shift;
    my $delta = 0;
    my $tf    = 0;

    # timestamp
    my $t2 = $h2->{'Timestamp_Sys100NS'};
    my $t1 = $h1->{'Timestamp_Sys100NS'};
    my $td = $t2 - $t1;

    # frequency
    my $f2 = $h2->{'Frequency_Sys100NS'};

    # data
    my $v2 = $h2->{$p};
    my $v1 = $h1->{$p};
    $delta = $v2 - $v1;

    my $r;

    eval {
        $tf = $td / $f2;
        $r  = $tf / $delta;
    };

    if ($@) {
        chomp($@);
        write_log("$@");
        write_log("v2=$v2 v1=$v1 t2=$t2 t1=$t1");
    }

    $r = 0 if $r < 0;

    # result
    return $r;
}

# print_raw - print krd raw data
#
sub putraw {
    my ( $traw, %c ) = @_;

    if ( RunningAsService() ) {

        for my $k ( sort keys %c ) {
            printf $rawlog "%s:%s\n", $traw, $c{$k};
        }

    }
    else {
        if ($logging) {

            for my $k ( sort keys %c ) {
                printf $rawlog "%s:%s\n", $traw, $c{$k};
            }

        }

        for my $k ( sort keys %c ) {
            printf "%s:%s\n", $traw, $c{$k};
        }
    }
}

# chklog - check log directory
#
sub chklog {

    my ($dir) = @_;

    if ( defined $dir ) {
        if ( !-d $dir ) {
            die "error: chklog - cannot find $dir directory";
        }
    }
    else {
        die "error: chklog - cannot find $dir directory";
    }

    return;
}

# open_data - open data file
#

sub open_file {

    my ($file) = @_;
    my $fh;

    if ( -f $file ) {
        open $fh, "+>>", "$file"
          or die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select( ( select($fh), $| = 1 )[0] );

    }
    else {
        open $fh, "+>", "$file"
          or die "error: open_file - cannot open $file $!";
        select( ( select($fh), $| = 1 )[0] );

    }

    return $fh;
}

# open_config - open JSON configuration file
#
sub open_config {

    my ($conf) = @_;
    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                die "error: open_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
            }
        }
        else {
            if ( -e "$cprefix\\$conf" ) {
                open my $fh, "<", "$cprefix\\$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                die "error: open_config - $! $conf \n";
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}

# get_ssi - get service sample interval
#
sub get_ssi {
    my ($data) = @_;
    my $ssi;

    my $rpref = substr( $recid, 0, -3 );

    my @recs = @{ $data->{'message'} };

    foreach my $rh (@recs) {

        next if ( $rh->{'name'} ne $rpref );
        $ssi = $rh->{'sample'};

    }

    $ssi = 60 if ( !defined $ssi );

    return $ssi;
}

# get_log - get log directory information
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    chklog($bpath);

    my $cpath = $data->{'log'}->{'current_path'};
    chklog($cpath);

    my $dpath = $data->{'log'}->{'daily_path'};
    chklog($dpath);

    return ( $bpath, $cpath, $dpath );
}

# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
      $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if ( eof $log ) {
        print $log "$dt $logbuf\n";
    }
    else {
        print $log "\n$dt $logbuf";
    }

    return;
}

# cktime - check midnight time
#
sub cktime {

    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    my $tcheck = sprintf( "%02d%02d", $hour, $min );

    my $yesterday = get_yesterday();

    # print "time check: $tcheck";

    if ( $tcheck eq $logtime ) {

        # write_log ("info: cktime - start log rotation");
        close($rawlog);
        my $numkrd = rotate( $clog, $dlog, $yesterday );

        # write_log ("info: cktime - end log rotation, files rotated: $numkrd");
        $rawlog = open_file($fkrd);
    }

    return;
}

##
sub rmkrd {
    my ($file) = @_;

    if ( -e $file ) {
        if   ( unlink($file) > 0 ) { return 0; }
        else                       { return 1; }
    }

    return;
}

## null the raw data
sub null2krd {

    my ( $blog, $clog ) = @_;

    opendir( DIR, $clog )
      or die "error: null2krd - Can't open $clog: $!";
    my @files = grep { !/^\.+$/ } readdir(DIR);
    close(DIR);

    my @krds;
    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd$/;
        push @krds, $krd;
    }

    foreach my $krdf (@krds) {
        copy( "$clog/$krdf", "$blog" )
          or die "error: null2krd cannot copy krd file: $krdf $!\n";
        open my $fh, ">", "$clog/$krdf";
        close $fh;
    }

    return;
}

## rotate raw data
sub rotate {

    my ( $rawdir, $dailydir, $dstamp ) = @_;

    opendir( DIR, $rawdir )
      or die "error: rotate - Can't open $rawdir: $!";
    my @files = grep { !/^\.+$/ } readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$dstamp";

    my @krd_files;
    my $p = $recid . ".krd";

    foreach my $krd (@files) {
        next if $krd !~ /^$p$/;
        push @krd_files, $krd;
    }

    my $nkrd = $#krd_files + 1;

    if ($verbose) {
        write_log("info: rotate - copying krd data files: $nkrd");
    }

    my $cnt = 0;

    # check if we have anything to move to daily
    if ( $nkrd > 0 ) {

        # make daily target dir
        mkdir $dest if ( !-d $dest );

        #unless(mkdir $dest) {
        #    write_log ("warning: rotate - $dstamp dir: $!");
        #}

        foreach my $rawfile (@krd_files) {
            copy( "$rawdir/$rawfile", "$dest" )
              or write_log("error: rotate - copying previous daily data, $!");

            # reset to zero
            open my $ftkrd, ">", "$rawdir/$rawfile";
            close $ftkrd;

            $cnt++;
        }
    }

    # return number of raw krd files moved to daily
    return $cnt;
}

## get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf( "%d-%02d-%02d", $yy, $mm, $dd );

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}

# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: diskrec [-lhV] | [interval [count]]
       diskrec -install auto
       diskrec -remove
 eg. 
  diskrec.exe                # default CLI mode, print per disk stats stdout
  diskrec.exe 1 5            # print per disk stats 5 times, every 1s stdout
  diskrec.exe -l 25          # print per disk stats every 25s stdout, krdlog
  diskrec.exe -install auto  # run as a service, every 60s, default krdlog
  diskrec.exe -remove        # stop and remove the service 

 FIELDS:
   #01 timestamp  : seconds since Epoch, time
   #02 diskid     : disk id

   # reads
   #03 reads      : disk reads per sec, rate
   #04 rkbytes    : disk read KB per sec, rate
   #05 rbusypct   : busy time servicing read requests, number

   # writes
   #06 writes     : disk writes per sec, rate
   #07 wkbytes    : disk write KB per sec, rate
   #08 wbusypct   : busy time servicing write requests, number

   # queue length, throughput
   #09 ql         : current r+w, including in service, queue length
   #10 aql        : average queue length, ratio
   #11 busypct    : busy time r+w requests, number
   #12 iops       : disk read+write requests per second, rate
   #13 rwkbytes   : read+write KB per second, rate

   # inventory disk usage
   #14 size       : volume size in GB, logical drive
   #15 free       : volume free in GB
   #16 usedpct    : volume used in percentage
END
    return;
}

# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
diskrec: 1.1.2, 2016-10-20 1225
END
    return;
}
