#
# Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

package PerlSvc;

use strict;
use warnings;
use File::Tail;
use File::Temp qw(tempfile);
use File::Copy;
use File::Basename;
use UUID::Tiny ':std';
use Digest::SHA;
use Getopt::Long;
use Time::HiRes qw(time);
use Win32::OLE ('in');
use Win32::Process;
use HTTP::Tiny;
use JSON;


###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";

# default timeout
my $timeout         = 25;
my $transid         = 'sender';
my $cprefix         = 'C:\\Program Files\\Kronometrix\\etc';
my ($h, $v, $V)     = 0;
our %Config         = (ServiceName => $transid);

Getopt::Long::Configure('bundling');
my $result = GetOptions (
                "t|timeout=i" => \$timeout,
                "v|verbose"   => \$v,
                "h|help"      => \$h,
                "V|version"   => \$V,
                "n|name=s"    => \$Config{ServiceName}
                );

usage() if ($h || ! $result);
revision() if (defined $V);

# process [interval]
my $interval;

if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    usage() if $interval == 0;
}
else {
    $interval = 60;
}

### Variables
my $loop        = 0;                   # current loop number
my $cfile       = 'kronometrix.json';  # configuration file
my $cdata;                             # configuration data
my $tcpka       = 0;                   # transport TCP keepalive settings
my $sid         = "";                  # subscription id
my $token       = "NA";                # token id
my @files;
my $hostid;
my ($baselog, $curlog, $slog);
my @dbs;
my %platform;                          # platform coordinates
$|= 1;                                 # autoflush


my $verbose = defined $v ? $v : 0;

### MAIN BODY #

my $curentProcess;

my $pid = Win32::Process::GetCurrentProcessID();

if (Win32::Process::Open($curentProcess, $pid, 0)) {
    $curentProcess->SetPriorityClass(HIGH_PRIORITY_CLASS);
}


# Default krd
my @recs = qw(sys cpu disk nic hdw);

# daemon name
my $dname = basename($0);

# osname
my $osname = "$^O";
$osname    = "win" if $osname eq "MSWin32";
my $agent = "kdr/1.4.6 sender $osname";

# cert, website, service lookup table
my %tblk;

# read configuration
$cdata = open_config($cfile);

## hostid
get_hostid($cdata);

## logs
($baselog, $curlog) = getlog($cdata);
$slog = $baselog . "\\sender.log";

# open log file
my $log;
# my $log = open_file($slog);

## datafile
@dbs = get_datafile($cdata);

## platform destination
%platform = get_platform($cdata);

# cd krd raw data directory
chdir("$curlog")
  or die "error: cannot open raw data directory, $!\n";

foreach (@dbs) {
    my $n = $_ . "rec.krd";
    push(
        @files,
        File::Tail->new(
            name               => "$n",
            interval           => 1,
            maxinterval        => $interval,
            ignore_nonexistant => 1,
	    reset_tail         => "c<0>"
        )
    );
}

# init HTTP transport
my $http = HTTP::Tiny->new(
          keep_alive => 0,
	  agent => "User-Agent: $agent");

unless (defined &ContinueRun) {
    *ContinueRun = sub { return 1 };
    *RunningAsService = sub { return 0 };
    Interactive();
}

if (!RunningAsService()) {
    if ($verbose) {
        print "platform: " . keys(%platform) . ".\n";
        for my $key ( keys %platform ) {
            my $value = $platform{$key};
            print "$key => $value\n";
        }
    }
} else {

    # open log file
    $log = open_file($slog);

    # get verbose mode
    my $vset = get_verbose($cdata);
    $verbose = 1 if ($vset); 

    writelog ("info: started");

    if ($verbose) {
        writelog ("info: verbose mode enabled");
    } else { writelog ("info: verbose mode disabled"); }
}

### Subroutines

sub Startup {

    # main loop
    while (ContinueRun()) {

    my ( $nfound, $timeleft, @pending ) =
      File::Tail::select( undef, undef, undef, $timeout, @files );

    # timeout - do something else here, if you need to
    unless ($nfound) {
        writelog("info: no krd raw data found, checking...")
          if ( $verbose == 1 );
    }
    else {

        ## raw data arrival
        writelog("info: krd raw data found") if ( $verbose == 1 );

        my $rcode = 0;
        foreach (@pending) {
            my $delta = $_->read;
            chomp($delta);

            # parse id
            my $msgid;
            my $devid;
            my $lmoid;
	    my $dsname;

            my $sysrec_on         = 0;
            my $cpurec_on         = 0;
	    my $certrec_on        = 0;
	    my $diskrec_on        = 0;
	    my $nicrec_on         = 0;
	    my $hdwrec_on         = 0;
	    my $procrec_on        = 0;
	    my $netrec_on         = 0;
	    my $zonerec_on        = 0;
	    my $jvmrec_on         = 0;
	    my $xenrec_on         = 0;
	    my $wsrec_on          = 0;
	    my $svcrec_on         = 0;
	    my $webrec_on         = 0;
	    my $webinvrec_on      = 0;
	    my $direc_on          = 0;
	    my $ntprec_on         = 0;
	    my $a2statrec_on      = 0;
	    my $a2invrec_on       = 0;
	    my $a2busrec_on       = 0;
	    my $iaq_g01rec_on     = 0;
	    my $iaq_gmw90rec_on   = 0;
	    my $iaq_msd1618rec_on = 0;

           if ( $_->{"input"} =~ /sysrec/         ) { $sysrec_on  = 1; }
        elsif ( $_->{"input"} =~ /cpurec/         ) { $cpurec_on  = 1; }
        elsif ( $_->{"input"} =~ /diskrec/        ) { $diskrec_on = 1; }
        elsif ( $_->{"input"} =~ /nicrec/         ) { $nicrec_on  = 1; }
        elsif ( $_->{"input"} =~ /netrec/         ) { $netrec_on  = 1; }
        elsif ( $_->{"input"} =~ /jvmrec/         ) { $jvmrec_on  = 1; }
        elsif ( $_->{"input"} =~ /procrec/        ) { $procrec_on = 1; } 
        elsif ( $_->{"input"} =~ /zonerec/        ) { $zonerec_on = 1; }
        elsif ( $_->{"input"} =~ /hdwrec/         ) { $hdwrec_on  = 1; }
        elsif ( $_->{"input"} =~ /xenrec/         ) { $xenrec_on  = 1; }
        elsif ( $_->{"input"} =~ /wsrec/          ) { $wsrec_on   = 1; }
        elsif ( $_->{"input"} =~ /webrec/         ) { $webrec_on  = 1; }
        elsif ( $_->{"input"} =~ /direc/          ) { $direc_on   = 1; }
        elsif ( $_->{"input"} =~ /ntrpec/         ) { $ntprec_on  = 1; }
	elsif ( $_->{"input"} =~ /a2statrec/      ) { $a2statrec_on  = 1; }
	elsif ( $_->{"input"} =~ /a2invrec/       ) { $a2invrec_on  = 1; }
	elsif ( $_->{"input"} =~ /a2busrec/       ) { $a2busrec_on  = 1; }
        elsif ( $_->{"input"} =~ /iaq_g01rec/     ) { $iaq_g01rec_on  = 1; }
        elsif ( $_->{"input"} =~ /iaq_gmw90rec/   ) { $iaq_gmw90rec_on  = 1; }
        elsif ( $_->{"input"} =~ /iaq_msd1618rec/ ) { $iaq_msd1618rec_on  = 1; }


            # each platform
            for my $key ( keys %platform ) {
                my $value = $platform{$key};

                ## value format
                # cpd:hostname2:443:00000000000000000000000000000000
                # lmo:host:port:sid => $token:$proto:$ka

                my ( $lid, $sid, $tid, $dsid ) = split ( /:/, $key );
                my ( $proto, $hname, $port, $ka ) = split( /:/, $value );

                if ($verbose == 1) {
                    writelog("info: main - $lid => $sid:$tid:$dsid value=$proto:$hname:$port:$ka");
                }
 
                # ready to fire data
                my $f = 0;

                if ($sysrec_on) {

                    # device id
                    $devid = "system";

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-sysrec";     }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-sysrec"; }
                 elsif ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-sysrec"; }

                } elsif ($cpurec_on) {

                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-cpurec"; }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-cpurec"; }
                 elsif ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-cpurec"; }

                } elsif ($diskrec_on) {

                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-diskrec"; }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-diskrec"; }
                 elsif ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-diskrec"; }

                } elsif ($direc_on) {
                    
                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'cpd')  { $f=1; $msgid = "$osname-direc"; }
                 elsif ($lid eq 'dpd')  { $f=1; $msgid = "dpd-$osname-direc"; }
                 elsif ($lid eq 'wpd')  { $f=1; $msgid = "wpd-$osname-direc"; }

                } elsif ($nicrec_on) {

                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-nicrec"; }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-nicrec"; }
                 elsif ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-nicrec"; }

                } elsif ($netrec_on) {

                    # device id
                    $devid = "system";

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-netrec"; }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-netrec"; }
                 elsif ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-netrec"; }

                } elsif ($ntprec_on) {

                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'dpd' ) { $f=1; $msgid = "dpd-$osname-ntprec"; }

                } elsif ($jvmrec_on) {

                    # device id
                    $devid = "system";

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-jvmrec"; }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-jvmrec"; }
                 elsif ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-jvmrec"; }

                } elsif ($iaq_g01rec_on) {

                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'iaqd') { $f=1; $msgid = "iaq_g01"; }

                } elsif ($iaq_gmw90rec_on) {

                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'iaqd') { $f=1; $msgid = "iaq_gmw90"; }

                } elsif ($iaq_msd1618rec_on) {
                 
                    # device id
                    $devid = get_devid(1, $delta);
                
                    # message id
                    if ($lid eq 'iaqd') { $f=1; $msgid = "iaq_msd1618"; }

                } elsif ($a2statrec_on) {

                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-a2stat"; }

                } elsif ($a2invrec_on) {

                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-a2inv"; }

                } elsif ($a2busrec_on) {

                    # device id
                    $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-a2bus"; }

                } elsif ($procrec_on) {

                    # device id
                    $devid = "system";

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-procrec"; }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-procrec"; }
                 elsif ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-procrec"; }

                } elsif ($zonerec_on) {

                    # device id
                    $devid = "system";

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-zonerec"; }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-zonerec"; }

                } elsif ($hdwrec_on) {

                    # device id
                    $devid = "system";

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-hdwrec"; }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-hdwrec"; }
                 elsif ($lid eq 'wpd') { $f=1; $msgid = "wpd-$osname-hdwrec"; }

                } elsif ($xenrec_on) {

                    # device id
                    $devid = "system";

                    # message id
                    if ($lid eq 'cpd') { $f=1; $msgid = "$osname-xenrec"; }
                 elsif ($lid eq 'dpd') { $f=1; $msgid = "dpd-$osname-xenrec"; }

                } elsif ($wsrec_on) {

                    # device id
                    $devid = "system";

                    # message id
                    if ($lid eq 'wcd') { $f=1; $msgid = "$osname-wsrec"; }

                } elsif ($svcrec_on) {

                    if ($lid eq 'epd') {
                    
                        $f=1;
                    
                        my $devtemp = get_devid(1, $delta);
                 
                        if ( $devtemp =~ /_/ ) {
                
                            ($dsname, $devid ) = split ( /_/, $devtemp );
                    
                            # no dsid in the lookup epd table
                            my $kkey = $dsname . $lid . 'svc' . $hostid . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }

                        } else {

                            $dsname = $devtemp;
                            # no dsid in the lookup epd table
                            # my $idl = 'svc' . $lid;
                            my $kkey = $dsname . $lid . 'svc' . $hostid . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }

                            $devid = "system";
                        }

                        $msgid = "epd-svc";
                    }
                 elsif ($lid eq 'dpd') { 

                        $f=1;
                    
                        my $devtemp = get_devid(1, $delta);
                 
                        if ( $devtemp =~ /_/ ) {
                
                            ($dsname, $devid ) = split ( /_/, $devtemp );
                    
                            # no dsid in the lookup epd table
                            #my $idl = 'svc' . $lid;
                            my $kkey = $dsname . $lid . 'svc' . $hostid . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }

                        } else {

                            $dsname = $devtemp;
                            # no dsid in the lookup epd table
                            # my $idl = 'svc' . $lid;
                            my $kkey = $dsname . $lid . 'svc' . $hostid . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }

                            $devid = "system";
                        }

                        $msgid = "dpd-svc";

                    }

                } elsif ($certrec_on) {

                    if ($lid eq 'epd') {
                    
                        $f=1;
                    
                        my $devtemp = get_devid(1, $delta);
                 
                        if ( $devtemp =~ /_/ ) {
                
                            ($dsname, $devid ) = split ( /_/, $devtemp );
                    
                            # no dsid in the lookup epd table
                            my $kkey = $dsname . $lid . 'cert' . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }

                        } else {

                            $dsname = $devtemp;
                            # no dsid in the lookup epd table
                            my $kkey = $dsname . $lid . 'cert' . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }

                            $devid = "system";
                        }

                        $msgid = "epd-cert";
                    }

                 elsif ($lid eq 'dpd') { 

                        $f=1;
                    
                        my $devtemp = get_devid(1, $delta);
                 
                        if ( $devtemp =~ /_/ ) {
                
                            ($dsname, $devid ) = split ( /_/, $devtemp );
                    
                            # no dsid in the lookup epd table
                            my $kkey = $dsname . $lid . 'cert' . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }

                        } else {

                            $dsname = $devtemp;
                            # no dsid in the lookup epd table
                            my $kkey = $dsname . $lid . 'cert' . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }

                            $devid = "system";
                        }

                        $msgid = "dpd-cert";

                  }

                } elsif ($webrec_on) {

                    # message id
                    if ($lid eq 'wpd') {
                        $f=1; 
                        $devid = get_devid(1, $delta);
                        $msgid = "wpd-$osname-ttfb";

                    } elsif ($lid eq 'epd'){

                        $f=1;

                        my $devtemp = get_devid(1, $delta);

                        if ( $devtemp =~ /_/ ) {

                            ($dsname, $devid ) = split ( /_/, $devtemp );
                             
                            # no dsid in the lookup epd table
                            my $kkey = $dsname . $lid . 'web' . $hostid . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }
                            

                        } else {

                            $dsname = $devtemp;
                            # no dsid in the lookup epd table
                            my $kkey = $dsname . $lid . 'web' . $hostid . $sid;
                            if (! exists($tblk{$kkey})) {
                                $dsid = make_wdsid($kkey);
                                $tblk{$kkey} = $dsid;
                            } else {
                                $dsid = $tblk{$kkey};
                            }

                            $devid = "system";
                        }

                        $msgid = "epd-ttfb";
                    }

                } elsif ($webinvrec_on) {

                    # device id
                    # $devid = get_devid(1, $delta);

                    # message id
                    if ($lid eq 'epd') {

                        $f=1;
                        my $devtemp = get_devid(1, $delta);

                        $dsname = $devtemp;
                        # no dsid in the lookup epd table
                        my $kkey = $dsname . $lid . 'web' . $hostid . $sid;
                        if (! exists($tblk{$kkey})) {
                            $dsid = make_wdsid($kkey);
                            $tblk{$kkey} = $dsid;
                        } else {
                            $dsid = $tblk{$kkey};
                        }

                        $devid = "system";
                        $msgid = "epd-inv";
                    }
                }

                if($f) {
                    send_data ($http, $hname, $sid, $tid, $dsid, $msgid,
                               $devid, $proto, $port, $dsname, $delta);
                }
            }

            my $bufin = $_->{"input"};

            writelog ("$bufin payload[$delta]")
              if ( $verbose );

        }    # for

    }    # else raw data

    # table lookup 
    if ($verbose) {
        my $tblk_keys = keys(%tblk);
        writelog ("Table lookup DSID: $tblk_keys");
        for my $key ( keys %tblk ) {
            my $value = $tblk{$key};
            writelog ("$key => $value");
        }
    }

    }    # while loop

    if (RunningAsService()) {
        writelog ("info: stopped");
    }

}


sub Interactive {

    Install();

    if (( ! defined $h ) and (! defined $V)) {
        Startup();
    }
}


sub Install {

    if (RunningAsService()) {
        # check for proper config file
        if (! defined $cdata) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }

        if (! defined $curlog ) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }
    }

    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
    $Config{Description} = "Kronometrix $transid Service";

    return;
}


sub Remove {

    $Config{ServiceName} = $transid;
    return;
}


# open_config - open JSON configuration file
#
sub open_config {

    my ($conf) = @_;
    my $json_data;

    {
        local $/;

        # we will parse now the file
	if ( defined $ENV{'KRMX_PREFIX'} ) {
	    if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
	        open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
	        $json_data = <$fh>;
	        close $fh;
	    } else {
                die "error: open_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
	    }
	} else {
	    if ( -e "$cprefix\\$conf" ) {
		open my $fh, "<", "$cprefix\\$conf";
		$json_data = <$fh>;
		close $fh;
	    } else { 
	        die "error: open_config - $! $conf \n"; 
	    }
	} 
    }
    
    my $perl_data = JSON->new->utf8->decode($json_data); 
    
    return $perl_data;
}


# write config file
sub write_config {

    my ( $conf, $perl_data ) = @_;

    # JSON Object
    my $json_data = JSON->new->utf8->pretty->encode($perl_data);

    if ( -e "$cprefix\\$conf" ) {
        open my $fh, ">", "$cprefix\\$conf.tmp";
             print $fh $json_data;
             close $fh;
        move( "$cprefix\\$conf.tmp", "$cprefix\\$conf" )
             or die "Error: cannot update $conf: $!";
    } else {
            die "error: write_config - $! $cprefix\\$conf \n";
    }
}


# get_devid, returns device_id
sub get_devid {

    my ( $pos, $krd ) = @_;
    my $device_id;

    my @krd = split( /:/, $krd );

    $device_id = $krd[$pos];

    writelog("info: get_devid - devid=$device_id")
      if ( $verbose == 1 );

    # device_id
    return $device_id;
}


# get hostuuid
sub new_hostid {

    my $hid;

    # get stats
    my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
          or die "Cannot initialize WMI interface\n";

    my $wcsp = $wmi->InstancesOf("Win32_ComputerSystemProduct");
    foreach my $obj (in $wcsp) {
        $hid = $obj->{UUID};
    }

    # fetches machine-id Win32
    if ( defined $hid ) {
        $hid = lc "$hid";
    }
    else {
        my $str = rand(time) . $osname;
        $hid = create_uuid_as_string(UUID_V5,$str);
    }

    chomp($hid);

    # return new host UUID;
    return $hid;
}


# get hostid
sub get_hostid {

    my ($data) = @_;

    # get hostuuid
    my $h = new_hostid;

    # populate DSID
    make_hdsid($data, $h);
}


# make data source ids, dsid
sub make_hdsid {

    my ($data, $huuid) = @_;
    my @lmo = ('amd', 'cpd', 'dpd', 'epd', 'iaqd', 'wcd', 'wpd' );

    # sid - subscription id
    # dsid - data source id
    # get all sids and generate dsid for each
    # dsid must be unique per sid

    my @kplt = @{ $data->{'transport'}->{'platform'} };

    # populate dsid for each platform and lmo
    foreach my $plt (@kplt) {
        my ($sid, $tid, $dsid);

        my $host  = $plt->{'host'};
        my $port  = $plt->{'port'};

        # last call, look for subscription id, sid

        foreach my $mo (@lmo) {

            if ($plt->{"$mo"}) {

                my @sub = @{ $plt->{"$mo"} };

                foreach my $sd (@sub) {

                    # get sid, tid
                    $sid = $sd ->{'sid'};
                    $tid = $sd ->{'tid'};

                    # get dsid
                    $dsid = $sd ->{'dsid'};
                   
                    if ($dsid eq "" ) {

                        if ( $sid ne "" ) {
                            my $str = $huuid . $sid;
                            $dsid = create_uuid_as_string(UUID_V5,$str);
                            chomp($dsid);
                            # print "sid=$sid tid=$tid dsid=$dsid\n";
                            $sd->{'dsid'} = $dsid;
                            write_config( $cfile, $data );
                        } else {
                            exit 1;
                        }
                    } else {
                        my $str = $huuid . $sid;
                        my $dsid_man = create_uuid_as_string(UUID_V5,$str);
                        chomp($dsid_man);

                        if ( $dsid ne $dsid_man ) {
                            # we need to update json file
                            # print "Not OK: $dsid => $dsid_man\n";
                            $sd->{'dsid'} = $dsid_man;
                            write_config( $cfile, $data );
                        }
                    }
                }
            }
        }
    }
}


# make website data source ids, dsid
sub make_wdsid {

    my ($name) = @_;

    my $wdsid = create_uuid_as_string(UUID_V5,$name);
    chomp($wdsid);

    writelog("info: make_wdsid - name=$name => $wdsid");

    return $wdsid;
}


# get k analytics platform information
sub get_platform {

    my ($data) = @_;
    my %kplt;

    my @lmo = ('amd', 'cpd', 'dpd', 'epd', 'iaqd', 'wcd', 'wpd');

    my @temp = @{ $data->{'transport'}->{'platform'} };

    foreach my $f (@temp) {
        my ($sid, $tid, $dsid);

        my $ka    = $f->{'keepalive'};
        my $proto = $f->{'protocol'};
        my $host  = $f->{'host'};
        my $port  = $f->{'port'};

        # last call, look for subscription

        foreach my $mo (@lmo) {

            if ($f->{"$mo"}) {

                my @sub = @{ $f->{"$mo"} };

                foreach my $sd (@sub) {

                    
                    # get sid, tid, dsid
                    $sid  = $sd ->{'sid'};
                    $tid  = $sd ->{'tid'};
                    $dsid = $sd ->{'dsid'};

                    if ( defined($host)
                         and defined($sid)
                         and defined($tid)
                         and defined($proto)
                         and defined($port)
                         and defined($ka) ) {
                        my $keyapp = $mo . ":" . $sid . ":" . "$tid" . ":" . $dsid;
                        $kplt{$keyapp} = "$proto:$host:$port:$ka";

                        print $keyapp; print $kplt{$keyapp};
                    }
                }
            }
        }
    }

    return %kplt;
}


sub send_data {

    my (
        $curl,  $dest,   $sid,   $token, $dsid,
        $msg_id, $dev_id, $proto, $port,  $dname, $delta
    ) = @_;
    my $response;

    ## http://server:port/api/private/send_data
    my $url = "$proto://" . $dest . ":" . $port . "/api/private/send_data";

    my ($hash, $post);

    # EPD-TTFB
    if ( $msg_id =~ /epd-ttfb/ ) {

        #1481544913:www.fi:0.243:0.202:0.163:0.202:0.080:1719:200
        my ( $t, $n, $v1, $v2, $v3, $v4, $v5, $v6, $v7 ) = split ( /:/, $delta );
        $n = $dev_id;
        $delta = join(':', $t, $n, $v1, $v2, $v3, $v4, $v5, $v6, $v7); 
        $hash   = sha256krd("$msg_id:$sid:$dsid:$delta");
        $post   = "$msg_id:$sid:$dsid:$delta:$hash";

    } elsif ( $msg_id =~ /cert/ ) {

        #1481544913:imaps:1506258005:279:1
        my ( $t, $n, $v1, $v2, $v3 ) = split ( /:/, $delta );
        $n = $dev_id;
        $delta = join(':', $t, $n, $v1, $v2, $v3);
        $hash   = sha256krd("$msg_id:$sid:$dsid:$dname:$delta");
        $post   = "$msg_id:$sid:$dsid:$dname:$delta:$hash";

    } elsif ( $msg_id =~ /svc/ ) {

        #1481544913:imaps:1506258005:279:1
        my ( $t, $n, $v1, $v2, $v3, $v4, $v5 ) = split ( /:/, $delta );
        $n = $dev_id;
        $delta = join(':', $t, $n, $v1, $v2, $v3, $v4, $v5);
        $hash   = sha256krd("$msg_id:$sid:$dsid:$dname:$delta");
        $post   = "$msg_id:$sid:$dsid:$dname:$delta:$hash";

    # TTFB                                   - WPD DOMAIN
    # IAQ_G01, IAQ_GMW90, IAQ_MSD            - IAQD DOMAIN
    # CPUREC, DISKREC, NICREC, DIREC, NTPREC - CPD DOMAIN
    } elsif ( $msg_id =~ /cpurec|diskrec|nicrec|direc|ntprec|iaq_g01|iaq_gmw90|iaq_msd1618|a2*|wpd-.*-ttfb/ ) {
        $hash   = sha256krd("$msg_id:$sid:$dsid:$delta");
        $post   = "$msg_id:$sid:$dsid:$delta:$hash";

    # SYSREC, HDWREC                         - CPD DOMAIN
    } else {
        $hash   = sha256krd("$msg_id:$sid:$dsid:$dev_id:$delta");
        $post   = "$msg_id:$sid:$dsid:$dev_id:$delta:$hash";
    }

    writelog("info: send_data - $post data to be delivered")
        if ( $verbose == 1 );

    $response = $http->request('POST', $url, {
        content => $post,
        headers => { 'Token' => "$token",
                     'content-type' => 'text/plain'},});

    my $status = $response->{status};

    if ( $verbose == 1 ) {

        if ($response->{success} ) {
            writelog("info: send_data - $msg_id krd data delivered");
        } else {
            writelog(
            "error: send_data - cant send $msg_id krd data, transport error");
        }
    }

    return;
}


# chklog - check log directory
#
sub chklog {

    my ($dir) = @_;

    if (defined $dir) {
        if (! -d $dir) {
            die "error: chklog - cannot find $dir directory";
        }
    } else {
        die "error: chklog - cannot find $dir directory";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
	  die "error: open_file - cannot open $file $!";
	seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
	  die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


# getlog - get log directory information
#
sub getlog {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    chklog($bpath);

    my $cpath = $data->{'log'}->{'current_path'};
    chklog($cpath);

    return ( $bpath, $cpath );
}


# get_verbose - get log verbose mode information
#
sub get_verbose {

    my ($data) = @_;
    my $sv = 0;

    my $vlog = $data->{'log'}->{'sender'};

    if ($vlog) {

        if ($vlog =~ /^verbose$/i) { $sv = 1; }
    }

    return $sv;
}


# get datafile
sub get_datafile {

    my ($data) = @_;
    my $schilds = 0;
    my @d;
    my @temp = @{ $data->{'message'} };

    # load d array
    foreach my $f (@temp) {
        next if ($f->{'status'} ne 'active');
        push @d, $f->{"name"};
        $schilds++;
    }

    # fallback to 5 main data messages if config missing
    @d = @recs if ( $schilds == 0 );

    return @d;
}


## auxiliares

# writelog - write log message
#
sub writelog {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# NIST SHA-256 message digest for krd raw data
sub sha256krd {
    my ($message) = @_;

    # compute SHA-256
    my $state = Digest::SHA->new(256);

    $state->add($message);
    my $digest = $state->hexdigest;

    return $digest;
}


# usage - print usage and exit.
sub usage {
    print STDERR <<END;   
USAGE: sender [-t secs] [-hvV] | [interval]
OPTIONS:
  -h | --help           : help information
  -v | --verbose        : verbose information
  -V | --version        : release version
  -t | --timeout secs   : timeout in seconds, default 25s
  interval              : max number of seconds between samples, default 60s 

 eg, 
  sender                # default mode, transport raw data every 60s
  sender 10             # transport raw data every 10s
  sender -t5 10         # transport raw data every 10s with 5s timeout
  sender -install auto  # run as a service, every 60s, 25s timeout
  sender -remove        # stop and remove the service
END
    return;
}

# revision - print revision and exit
sub revision {
    print STDERR <<END;
sender: 1.1.4, 2017-08-04 1241
END
    return;
}
