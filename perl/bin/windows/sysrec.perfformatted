#
# Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

package PerlSvc;

use strict;
use warnings;
use Getopt::Long;
use Date::Calc qw(:all);
use File::Copy;
use Win32::OLE ('in');
use Win32::Process;
use Time::HiRes qw(time gettimeofday usleep tv_interval);
use Sys::Hostname;
use Time::Local;
use JSON;

# Debug Only
#use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";

my $recid           = 'sysrec';
my $cprefix         = 'C:\\Program Files\\Kronometrix\\etc';
my ($l, $v, $h, $V) = 0;
our %Config         = (ServiceName => $recid);

Getopt::Long::Configure('bundling');
my $result = GetOptions (
                "l|logging"     => \$l,
                "v|verbose"     => \$v,
                "h|help"        => \$h,
                "V|version"     => \$V,
                "n|name=s"      => \$Config{ServiceName}
                );

usage() if (defined $h || ! $result);
revision() if (defined $V);

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}


### Variables
my $loop        = 0;                      # current loop number
my $cf          = 'kronometrix.json';     # default json config
my $logtime     = '0000';                 # min time check 23:59
my $stime;                                # sleep timer
my $last_time   = 0;                      # first counter
my $pdev        = 'PCI|USB|VMBUS';
my $vdev        = 'ROOT|SW|\{';
my $vid         = 'Microsoft|VMWare|VirtualBox';
$|= 1;                                    # autoflush

my $verbose = defined $v ? $v : 0;
my $logging = defined $l ? $l : 0;

### MAIN BODY

# read configuration
my $cdata = open_config($cf);

# get log dir configuration
my ( $blog, $clog, $dlog ) = getlog($cdata);

my $fname = $blog . "\\" . $recid . ".log";
my $fkrd  = $clog . "\\" . $recid . ".krd";

# open raw data
my ($log, $rawlog);

if ($logging) {
    $rawlog = open_file($fkrd);
    $log = open_file($fname);
    writelog ("info: started");
}

# get stats
my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
    or die "Cannot initialize WMI interface\n";

unless (defined &ContinueRun) {
    *ContinueRun = sub { return 1 };
    *RunningAsService = sub { return 0 };
    Interactive();
}

if (RunningAsService()) {

    # get service sample interval
    $interval = getssi($cdata);
    $loop_max = 2**32;

    $rawlog = open_file($fkrd);
    $log = open_file($fname);

    my $curentProcess;

    my $pid = Win32::Process::GetCurrentProcessID();

    if (Win32::Process::Open($curentProcess, $pid, 0)) {
        $curentProcess->SetPriorityClass(REALTIME_PRIORITY_CLASS);
    }

    writelog ("info: started");
}


### SUBROUTINES


sub Startup {

    while(ContinueRun()) {

    k_sleep();

    my ($cpupct, $userpct, $idlepct, $syspct, $irqpct);

    # cpu statistics
    # 10 metrics

    my $cpuid='_Total';

    my $wcpu = $wmi->InstancesOf("Win32_PerfFormattedData_PerfOS_Processor")
    #my $wcpu = $wmi->ExecQuery("SELECT PercentProcessorTime, PercentUserTime,PercentPrivilegedTime,PercentIdleTime,PercentInterruptTime  from Win32_PerfFormattedData_PerfOS_Processor Where Name='$cpuid'")
        or die "Cannot get Win32 PerfOS_Processor\n";

    foreach my $obj (in $wcpu) {

        next if $obj->{Name} ne '_Total';

        $cpupct = $obj->{PercentProcessorTime};
        $userpct = $obj->{PercentUserTime};
	$syspct = $obj->{PercentPrivilegedTime};
	$idlepct = $obj->{PercentIdleTime};
	$irqpct = $obj->{PercentInterruptTime};
    }

    my $wsys = $wmi->InstancesOf("Win32_PerfFormattedData_PerfOS_System")
        or die "Cannot get Win32 PerfOS_System\n";

    my ($runqsz, $proc, $lwp);
    foreach my $obj (in $wsys) {
	$runqsz = $obj->{ProcessorQueueLength};
	$proc = $obj->{Processes};
	$lwp = $obj->{Threads};
    }

    my $sumpct = 0;
    my $headpct = 0;


    # memory statistics
    # 9 metrics
    my $wos = $wmi->InstancesOf("Win32_OperatingSystem")
        or die "Cannot get Win32 OperatingSystem\n";

    my ($memtotal, $memfree, $swaptotal, $swapfree);
    foreach my $obj (in $wos) {
        $memtotal  = $obj->{TotalVisibleMemorySize};
        $memfree = $obj->{FreePhysicalMemory};
        $swaptotal = $obj->{SizeStoredInPagingFiles};
        $swapfree = $obj->{FreeSpaceInPagingFiles};
    }

    my $memused =  $memtotal - $memfree;
    my $memusedpct = sprintf ("%.2f", ( $memused / $memtotal ) * 100 );
    my $realfreepct = sprintf ("%.2f", ( $memfree / $memtotal ) * 100 );
    my $swapused = $swaptotal - $swapfree;
    my $swapusedpct = sprintf("%.2f", ($swaptotal - $swapfree) / $swaptotal * 100); 
   
    # Disk IO statistics
    # 10 metrics
    my ($reads,  $rkbytes, $rbusypct, 
        $writes, $wkbytes, $wbusypct,
	$busypct,$aql, 
	$iops, $krw );

    my $wdstat = 
        $wmi->InstancesOf("Win32_PerfFormattedData_PerfDisk_PhysicalDisk")
	    or die "Cannot get Win32 PerfDisks\n";

    foreach my $obj (in $wdstat) {
        $reads    = $obj->{DiskReadsPerSec};
        $rkbytes  = sprintf "%.2f", $obj->{DiskReadBytesPerSec} / 1024;
        $rbusypct = $obj->{PercentDiskReadTime};

        $writes   = $obj->{DiskWritesPerSec};
        $wkbytes  = sprintf "%.2f", $obj->{DiskWriteBytesPerSec} / 1024;
        $wbusypct = $obj->{PercentDiskWriteTime};

	$aql      = $obj->{AvgDiskQueueLength};
	$busypct  = $obj->{PercentDiskTime};

	$iops  = $obj->{DiskTransfersPerSec};
	$krw   = sprintf "%.2f", $obj->{DiskBytesPerSec} / 1024;
    }


    # NIC IO statistics
    # metrics
    my ($rxpkt, $rxkbytes, $rxpkterr,  $rxpktdrop,
        $txpkt, $txkbytes, $txpkterr,  $txpktdrop,
	$ql,    $rxtxpkt,  $rxtxkbytes,$band ) = 0;

    # get no of NICs
    my $wn = $wmi->ExecQuery("SELECT * from Win32_NetworkAdapter");
    my $nnic = 0;

    foreach my $nic (in $wn) {

        my $nic_vendor = $nic->{Manufacturer};
	my $nic_pnp    = $nic->{PNPDeviceID};
	my $nic_desc   = $nic->{Description};
	my $nic_index  = $nic->{Index};
	my $nic_devid  = $nic->{DeviceID};

        if (defined $nic_vendor and defined $nic_pnp) {
	    if ( $nic_vendor =~ /$vid/i and $nic_pnp !~ /$pdev/i ) { next; }
         elsif ( $nic_vendor !~ /$vid/i and $nic_pnp =~ /$vdev/i ) { next; }
	  else {

	        my $nic_name = lc $nic->{ServiceName} . "_" . $nic_devid;

		# get PNPEntity for NIC DeviceID
		my $pnpq = 'ASSOCIATORS OF ' .
		           '{Win32_NetworkAdapter.DeviceID="' . $nic_devid .
			   '"} WHERE ResultClass=Win32_PnpEntity';

                my $pnp = $wmi -> ExecQuery($pnpq);
                foreach my $po (in $pnp) {
	            my $pnp_name = $po->{Name};
		    $pnp_name =~ s/\(/[/g; 
		    $pnp_name =~ s/\)/]/g; 
		    $pnp_name =~ s/\//_/g; 
		    $pnp_name =~ s/\\/_/g; 
		    $pnp_name =~ s/\#/_/g;

                    ### verbose
		    if ($verbose) {
			if (RunningAsService()) {
                            writelog ("info: DeviceID: $nic_devid, $pnp_name");
			} else { 
			    writelog ("info: DeviceID: $nic_devid $pnp_name") if ($logging);
                            print "info: DeviceID: $nic_devid, $pnp_name\n"; 
			}
		    }

                    my $nicstat = $wmi->ExecQuery("SELECT * from Win32_PerfFormattedData_Tcpip_NetworkInterface where Name='$pnp_name'");

		    foreach my $pn (in $nicstat) {
	                # perf metrics per NIC
                        $rxpkt      += $pn -> {PacketsReceivedPerSec};
                        $rxkbytes   += sprintf "%.2f", 
		                         $pn->{BytesReceivedPerSec} / 1024;
                        $rxpkterr   += $pn -> {PacketsReceivedErrors};
                        $rxpktdrop  += $pn -> {PacketsReceivedDiscarded};

                        $txpkt      += $pn -> {PacketsSentPerSec};
                        $txkbytes   += sprintf "%.2f", 
		                         $pn->{BytesSentPerSec} / 1024;
                        $txpkterr   += $pn -> {PacketsOutboundErrors};
                        $txpktdrop  += $pn -> {PacketsOutboundDiscarded};
			
                        $rxtxpkt    += $rxpkt + $txpkt;
                        $rxtxkbytes += $rxkbytes + $txkbytes;
                    }
	        }
	    }
        } else { next; }
    }

    # end payload
    my $tnow = [gettimeofday];

    # cktime for rotation
    if (RunningAsService()) {
        cktime();
    }

    if ($last_time > 0) {

        putraw($$tnow[0],
	   $cpupct,  $sumpct, $headpct, $userpct, $syspct,
	   $idlepct, $irqpct, $runqsz,  $proc,    $lwp, 
	   $memusedpct,  $memused,     $memfree,  $memtotal, 
	   $realfreepct, $swapusedpct, $swapused, $swapfree, 
	   $swaptotal, 
	   $reads,       $rkbytes,     $rbusypct,
	   $writes,      $wkbytes,     $wbusypct,
	   $aql,         $busypct,
	   $iops,        $krw,
	   $rxpkt,   $rxkbytes,   $rxpkterr, $rxpktdrop,
	   $txpkt,   $txkbytes,   $txpkterr, $txpktdrop,
           $rxtxpkt, $rxtxkbytes
	   );

	$last_time=$$tnow[0];

    } else {

        putraw($$tnow[0],
	       $cpupct,  $sumpct, $headpct, $userpct, $syspct,
	       $idlepct, $irqpct, $runqsz,  $proc,    $lwp, 
	       $memusedpct,  $memused,     $memfree,  $memtotal, 
	       $realfreepct, $swapusedpct, $swapused, $swapfree, 
	       $swaptotal, 
	       $reads,       $rkbytes,     $rbusypct,
	       $writes,      $wkbytes,     $wbusypct,
	       $aql,         $busypct,
	       $iops,        $krw,
	       $rxpkt,   $rxkbytes,   $rxpkterr, $rxpktdrop,
	       $txpkt,   $txkbytes,   $txpkterr, $txpktdrop,
               $rxtxpkt, $rxtxkbytes
	       );

        if (!RunningAsService()) {
            # check count, interval
            last if ++$loop == $loop_max;
        }

	$last_time=$$tnow[0];
         
	next;

    }

    if (!RunningAsService()) {
        # check count, interval
        last if ++$loop == $loop_max;
    }


    } # while loop

    if (RunningAsService()) {
        writelog ("info: stopped");
    }
}


sub Interactive {

    Install();

    if (( ! defined $h ) and (! defined $V)) {
        Startup();
    }
}


sub Install {

    if (RunningAsService()) {
        # check for proper config file
        if (! defined $cdata) { 
            die "Cant install $Config{ServiceName} service, exiting...\n"; 
        }

        if (! defined $clog ) {
            die "Cant install $Config{ServiceName} service, exiting...\n"; 
        }
    }

    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
    $Config{Description} = "Kronometrix $recid Service";

    return;
}


sub Remove {

    $Config{ServiceName} = $recid;
    return;
}


# k_sleep - sleeps exact number of usec
#
sub k_sleep {

    my $t = [gettimeofday];
    my $next = (int($t->[0]/$interval) + 1 ) * $interval;
    my $delta = tv_interval ($t, [$next, 0]);
    usleep($delta * 1_000_000);

    return;
}


# print_raw - print krd raw data
#
sub putraw {
    my ($traw, 
        $cpu,   $sum, $head, 
	$user,  $sys, $idle, 
	$irq,   $rq,  $prc,  $thr, 
	$mupct, $mu,  $mf,   $mt,  $mfpct,
	$supct, $su,  $suf,  $sut,
        $r,     $rk,  $rb,
	$w,     $wk,  $wb,
	$q,     $b,
	$i,     $k,
	$rx,    $rxk, $rxe,  $rxd,
	$tx,    $txk, $txe,  $txd,
	$rxtx,  $rxtxk
	) = @_;

    if (RunningAsService()) {

        printf $rawlog
        "%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%d:%d:%.2f:%d:%d:%d:%.2f:%.2f:%d:%d:%d:%d:%.2f:%d:%d:%.2f:%d:%d:%d:%d:%.2f:%d:%.2f:%d:%d:%d:%.2f:%d:%d:%d:%.2f\n",
        $traw, 
        $cpu,   $sum, $head, 
	$user,  $sys, $idle, 
	$irq,   $rq,  $prc,  $thr, 
	$mupct, $mu,  $mf,   $mt,  $mfpct,
	$supct, $su,  $suf,  $sut,
        $r,     $rk,  $rb,
	$w,     $wk,  $wb,
	$q,     $b,
	$i,     $k,
	$rx,    $rxk, $rxe,  $rxd,
	$tx,    $txk, $txe,  $txd,
	$rxtx,  $rxtxk;

    } else {

        if ( $logging ) {

            printf $rawlog 
            "%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%d:%d:%.2f:%d:%d:%d:%.2f:%.2f:%d:%d:%d:%d:%.2f:%d:%d:%.2f:%d:%d:%d:%d:%.2f:%d:%.2f:%d:%d:%d:%.2f:%d:%d:%d:%.2f\n",
                $traw, 
                $cpu,   $sum, $head, 
        	$user,  $sys, $idle, 
        	$irq,   $rq,  $prc,  $thr, 
        	$mupct, $mu,  $mf,   $mt,  $mfpct,
        	$supct, $su,  $suf,  $sut,
                $r,     $rk,  $rb,
	        $w,     $wk,  $wb,
	        $q,     $b,
	        $i,     $k,
	        $rx,    $rxk, $rxe,  $rxd,
        	$tx,    $txk, $txe,  $txd,
        	$rxtx,  $rxtxk;
	}


        printf
        "%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%d:%d:%.2f:%d:%d:%d:%.2f:%.2f:%d:%d:%d:%d:%.2f:%d:%d:%.2f:%d:%d:%d:%d:%.2f:%d:%.2f:%d:%d:%d:%.2f:%d:%d:%d:%.2f\n",
        $traw, 
        $cpu,   $sum, $head, 
	$user,  $sys, $idle, 
	$irq,   $rq,  $prc,  $thr, 
	$mupct, $mu,  $mf,   $mt,  $mfpct,
	$supct, $su,  $suf,  $sut,
        $r,     $rk,  $rb,
	$w,     $wk,  $wb,
	$q,     $b,
	$i,     $k,
	$rx,    $rxk, $rxe,  $rxd,
	$tx,    $txk, $txe,  $txd,
	$rxtx,  $rxtxk;

    }

    return;
}


# chklog - check log directory
#
sub chklog {

    my ($dir) = @_;

    if (defined $dir) {
        if (! -d $dir) {
            die "error: chklog - cannot find $dir directory";
        }
    } else {
        die "error: chklog - cannot find $dir directory";
    }

    return;
}


# open_data - open data file
#

sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
	  die "error: open_file - cannot open $file $!";
	seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
	  die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}



# open_config - open JSON configuration file
#
sub open_config {

    my ($conf) = @_;
    my $json_data;

    {
        local $/;

        # we will parse now the file
	if ( defined $ENV{'KRMX_PREFIX'} ) {
	    if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
	        open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
	        $json_data = <$fh>;
	        close $fh;
	    } else {
                die "error: open_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
	    }
	} else {
	    if ( -e "$cprefix\\$conf" ) {
		open my $fh, "<", "$cprefix\\$conf";
		$json_data = <$fh>;
		close $fh;
	    } else { 
	        die "error: open_config - $! $conf \n"; 
	    }
	} 
    }
    
    my $perl_data = JSON->new->utf8->decode($json_data); 
    
    return $perl_data;
}


# getssi - get service sample interval
#
sub getssi {
    my ($data) = @_;

    my $ssi = $data->{'sampling_interval'}->{"$recid"};
    $ssi = 60 if (! defined $ssi); 

    return $ssi;
}



# getlog - get log directory information
#
sub getlog {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    chklog($bpath);

    my $cpath = $data->{'log'}->{'current_path'};
    chklog($cpath);

    my $dpath = $data->{'log'}->{'daily_path'};
    chklog($dpath);

    return ( $bpath, $cpath, $dpath );
}


# get_uptime - return system uptime
#
sub get_uptime {

    my ($lb, $ct) = @_;

    # extract lastboot time
    my $lyr   = substr ($lb, 0, 4);
    my $lmon  = substr ($lb, 4, 2);
    my $lday  = substr ($lb, 6, 2);
    my $lhrs  = substr ($lb, 8, 2);
    my $lmin  = substr ($lb, 10, 2);
    my $lsec  = substr ($lb, 12, 2);

    my $cyr   = substr ($ct, 0, 4);
    my $cmon  = substr ($ct, 4, 2);
    my $cday  = substr ($ct, 6, 2);
    my $chrs  = substr ($ct, 8, 2);
    my $cmin  = substr ($ct, 10, 2);
    my $csec  = substr ($ct, 12, 2);

    #print "Last timeboot: $lyr $lmon $lday $lhrs $lmin $lsec\n";
    #print "Current DateTime: $cyr $cmon $cday $chrs $cmin $csec\n";

    my $bootTime = timelocal($lsec, $lmin, $lhrs, $lday, $lmon - 1, $lyr);
    my $currentTime = timelocal($csec, $cmin, $chrs, $cday, $cmon - 1, $cyr);

    my $delta = $currentTime - $bootTime;
    my ($secs, $mins, $hrs, $days);
    $secs    =  $delta % 60;
    $delta   = ($delta - $secs) / 60;
    $mins    =  $delta % 60;
    $delta   = ($delta - $mins) / 60;
    $hrs     =  $delta % 24;
    $delta   = ($delta - $hrs)   / 24;
    $days    =  $delta;

    my $u = "$days" . "d " . "$hrs" . "h " . "$mins" . "m " . "$secs" . "s";

    # return uptime
    return $u;
}


# writelog - write log message
#
sub writelog {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# cktime - check midnight time
#
sub cktime {

    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = 
       localtime(time);

    my $tcheck = sprintf ("%02d%02d", $hour, $min);

    my $yesterday = get_yesterday();

    # print "time check: $tcheck";

    if ($tcheck eq $logtime ) {
        writelog ("info: cktime - start log rotation");
        close $rawlog;
	my $numkrd = rotate($clog, $dlog, $yesterday);
        writelog ("info: cktime - end log rotation, files rotated: $numkrd");
        $rawlog = open_file($fkrd);
    }

    return;
}


## 
sub rmkrd {
    my ($file) = @_;

    if ( -e $file ) {
        if (unlink($file) > 0) { return 0; } else { return 1; }
    }

    return;
}


## null the raw data
sub null2krd {

    my($blog, $clog ) = @_;

    opendir(DIR, $clog) or
        die "error: null2krd - Can't open $clog: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my @krds;
    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd$/;
        push @krds, $krd;
    }

    foreach my $krdf (@krds) {
        copy("$clog/$krdf", "$blog") or
           die "error: null2krd cannot copy krd file: $krdf $!\n";
         open my $fh, ">", "$clog/$krdf";
         close $fh;
    }

    return;
}


## rotate raw data
sub rotate {

    my($rawdir, $dailydir, $dstamp) = @_;

    opendir(DIR, $rawdir) or
        die "error: rotate - Can't open $rawdir: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$dstamp";

    my @krd_files;
    my $p = $recid . ".krd";

    foreach my $krd (@files) {
        next if $krd !~ /^$p$/;
        push @krd_files, $krd;
    }

    my $nkrd = $#krd_files + 1;

    if ($verbose) {
        writelog ("info: rotate - copying krd data files: $nkrd");
    }

    my $cnt = 0;
    # check if we have anything to move to daily
    if ( $nkrd > 0 ) {
   
        # make daily target dir
        unless(mkdir $dest) {
            writelog ("warning: rotate - $dstamp dir: $!");
        }

        foreach my $rawfile (@krd_files) {
            copy("$rawdir/$rawfile","$dest") or
                writelog ("error: rotate - copying previous daily data, $!");

            # reset to zero
	    open my $ftkrd, ">", "$rawdir/$rawfile";
	    close $ftkrd;

            $cnt++;
        }
    }

    # return number of raw krd files moved to daily
    return $cnt;
}


## get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf("%d-%02d-%02d", $yy, $mm, $dd);

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}


# usage - print usage and exit.
#
sub usage {

#    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
#    $Config{Description} = "Kronometrix $recid Service";

    print STDERR <<END;
USAGE: sysrec [-lhvV] | [interval [count]]
       sysrec -install auto 
       sysrec -remove
 eg. 
  sysrec.exe                # default CLI mode, print system stats stdout
  sysrec.exe 1 5            # print system stats 5 times, every 1s stdout
  sysrec.exe -l 25          # print system stats every 25s stdout and krdlog
  sysrec.exe -install auto  # run as a service, every 60s, default krdlog
  sysrec.exe -remove        # stop and remove the service

 FIELDS:
  CPU
   #01 timestamp  : seconds since Epoch, time
   #02 cpupct     : cpu utilization, across all cpus, number
   #03 sumpct     : sum of all cpus utilization, number
   #04 headpct    : headroom cpu available, all cpus, number
   #05 userpct    : cpu utilization, user space in percent, number
   #06 sysct      : cpu utilization, system space, number
   #07 idlepct    : cpu utilization, idle state, number
   #08 irqpct     : cpu percentage servicing interrupts, number
   #09 runqsz     : run queue length, tasks waiting for run time, number
   #10 plistsz    : number of processes in the system, number
   #11 threads    : number of threads in the system, number

  MEM
   #12 memusedpct : size of used memory in percent, number
   #13 memused    : size of used memory in KB, number
   #14 memfree    : size of free memory in KB, number
   #15 memtotal   : size of memory in KB, number
   #16 realfreepct: size of memory real free in percent of total memory, number
   #17 swapusedpct: size of used swap space in percent, number
   #18 swapused   : size of swap space is used is KB, number
   #19 swapfree   : size of swap space is free in KB, number
   #20 swaptotal  : size of swap space in KB, number

  DISK
   #21 reads      : disk read requests per second, rate
   #22 rkbytes    : read KB per second, in KB, rate
   #23 rbusypct   : busy time servicing read requests, number
   #24 writes     : disk write requests per second, rate
   #25 wkbytes    : write KB per second, rate
   #26 wbusypct   : busy time servicing write requests, number

   # throughput
   #27 aql        : avg r+w queue length 
   #28 busypct    : busy time r+w requests, number
   #29 iops       : disk read+write requests per second, rate
   #30 rwkbytes   : read+write KB per second, rate

  NIC
   # rx received, inbound
   #31 rxpkt       : rx packets per sec, rate
   #32 rxkbytes    : rx KB per sec, rate
   #33 rxerr       : rx packets containg errors, rate
   #34 rxdrop      : rx drop packets, counter

   # tx transmitted, outbound
   #35 txpkt       : tx packets per sec, rate
   #36 txkbytes    : tx KB per sec, rate
   #37 txerr       : tx packets containg errors, rate
   #38 txdrop      : tx drop packets, counter

   # throughput
   #39 rxtxpkt     : rx+tx packets per second, counter
   #40 rxtxkbytes  : rx+tx KB per second, rate

END
    return;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
sysrec: 1.0.19, 2016-01-20 1312
END
    return;
}
