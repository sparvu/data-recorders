#
#  Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
#  Initial Author: Stefan Parvu
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

package PerlSvc;

use strict;
use warnings;
use Getopt::Long;
use Date::Calc qw(:all);
use File::Copy;
use Time::HiRes qw(time gettimeofday sleep tv_interval);
use Win32::OLE ('in');
use Sys::Hostname;
use Time::Local;
use Win32::Process;
use JSON;


# Debug Only
# use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";

my $recid           = 'cpurec';
my $cprefix         = 'C:\\Program Files\\Kronometrix\\etc';
my ($l, $v, $h, $V) = 0;
our %Config         = (ServiceName => $recid);

Getopt::Long::Configure('bundling');
my $result = GetOptions (
                "l|logging" => \$l,
                "v|verbose" => \$v,
                "h|help"    => \$h,
                "V|version" => \$V,
                "n|name=s" => \$Config{ServiceName}
                );

usage() if (defined $h || ! $result);
revision() if (defined $V);

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $loop        = 0;                      # current loop number
my $cf          = 'kronometrix.json';     # default json config
my $logtime     = '0000';                 # min time check 23:59
my $stime;                                # sleep timer
my $last_time   = 0;                      # first counter
$|= 1;                                    # autoflush

my $verbose = defined $v ? $v : 0;
my $logging = defined $l ? $l : 0;

### MAIN BODY


# read configuration
my $cdata = open_config($cf);

my ( $blog, $clog, $dlog ) = getlog($cdata);

my $fname = $blog . "\\" . $recid . ".log";
my $fkrd  = $clog . "\\" . $recid . ".krd";

# log, rawlog files
my ($log, $rawlog);

if ($logging) {
    $rawlog = open_file($fkrd);
    $log = open_file($fname);
    writelog ("info: started");
}

# get stats
my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
    or die "Cannot initialize WMI interface\n";

unless (defined &ContinueRun) {
    *ContinueRun = sub { return 1 };
    *RunningAsService = sub { return 0 };
    Interactive();
}

if (RunningAsService()) {

    # get service sample interval
    $interval = getssi($cdata);
    $loop_max = 2**32;

    $rawlog = open_file($fkrd);
    $log = open_file($fname);

    my $curentProcess;

    my $pid = Win32::Process::GetCurrentProcessID();

    if (Win32::Process::Open($curentProcess, $pid, 0)) {
        $curentProcess->SetPriorityClass(HIGH_PRIORITY_CLASS);
    }

    writelog ("info: started");


}


### SUBROUTINES


sub Startup {

    while(ContinueRun()) {


    my $start = [gettimeofday];


    my ($id, $userpct,  $idlepct , $syspct, $irqpct, $privpct, $dpcpct, $totalpct);

    # Win32_PerfFormattedData_PerfOS_Processor
    my $wcpu = $wmi->InstancesOf("Win32_PerfFormattedData_PerfOS_Processor") 
        or die "Cannot get wmi0";

    # per-cpu hash data
    my %cstat;

    foreach my $obj (in $wcpu) {
        $id = $obj->{Name};
        $userpct = $obj->{PercentUserTime};
        $idlepct = $obj->{PercentIdleTime};
        $privpct = $obj->{PercentProcessorTime};
        $syspct = $obj->{PercentPrivilegedTime};
        $irqpct = $obj->{PercentInterruptTime};
        $dpcpct = $obj->{PercentDPCTime};
	$totalpct = 100 - $idlepct;

	next if $id =~ /_Total/;

	# load cstat
	$cstat{$id} =
         "cpu$id:$userpct:$syspct:$irqpct:$dpcpct:$privpct:$idlepct:$totalpct";
    }


    # end payload
    my $tnow = [gettimeofday];
    my $elapsed = tv_interval ($start, $tnow);
    print " CPU Win32_PerfFormatted_PerfOS_Processor: $elapsed sec\n";



    my $stime = 1;
    if ( $elapsed < $interval ) { $stime = $interval - $elapsed; }


    # cktime for rotation
    if (RunningAsService()) {
        cktime();
    }

    if ($last_time > 0) {

        putraw($$tnow[0], %cstat);

        $last_time = $$tnow[0];
    
        sleep($stime);


    } else {

        putraw($$tnow[0], %cstat);

        if (!RunningAsService()) {
            # check count, interval
            last if ++$loop == $loop_max;
        }

        $last_time = $$tnow[0];

        sleep($stime);

	next;
    }


    if (!RunningAsService()) {
        # check count, interval
        last if ++$loop == $loop_max;
    }


    } # while loop

    if (RunningAsService()) {
        writelog ("info: stopped");
    }
}


sub Interactive {

    Install();

    if (( ! defined $h ) and (! defined $V)) {
        Startup();
    }
}


sub Install {

    if (RunningAsService()) {
        # check for proper config file
        if (! defined $cdata) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }

        if (! defined $clog ) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }
    }

    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
    $Config{Description} = "Kronometrix $recid Service";

    return;
}


sub Remove {

    $Config{ServiceName} = $recid;
    return;
}


# k_sleep - sleeps exact number of usec
#
sub k_sleep {

    my $t = [gettimeofday];
    my $next = (int($t->[0]/$interval) + 1) * $interval;
    my $delta = tv_interval ($t, [$next, 0]);
    usleep($delta * 1_000_000);

    return;
}


# print_raw - print krd raw data
#
sub putraw {
    my ($traw, %c)  = @_;

    if (RunningAsService()) {

	for my $k (sort keys %c) {
            printf $rawlog "%s:%s\n",
	        $traw, $c{$k};
	}

    } else {
        if ( $logging ) {

	    for my $k (sort keys %c) {
                printf $rawlog "%s:%s\n", $traw, $c{$k};
	    }

	}

	for my $k (sort keys %c) {
            printf "%s:%s\n", $traw, $c{$k};
	}
    }
}


# chklog - check log directory
#
sub chklog {

    my ($dir) = @_;

    if (defined $dir) {
        if (! -d $dir) {
            die "error: chklog - cannot find $dir directory";
        }
    } else {
        die "error: chklog - cannot find $dir directory";
    }

    return;
}


# open_data - open data file
#

sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
	  die "error: open_file - cannot open $file $!";
	seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
	  die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}



# open_config - open JSON configuration file
#
sub open_config {

    my ($conf) = @_;
    my $json_data;

    {
        local $/;

        # we will parse now the file
	if ( defined $ENV{'KRMX_PREFIX'} ) {
	    if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
	        open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
	        $json_data = <$fh>;
	        close $fh;
	    } else {
                die "error: open_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
	    }
	} else {
	    if ( -e "$cprefix\\$conf" ) {
		open my $fh, "<", "$cprefix\\$conf";
		$json_data = <$fh>;
		close $fh;
	    } else { 
	        die "error: open_config - $! $conf \n"; 
	    }
	} 
    }
    
    my $perl_data = JSON->new->utf8->decode($json_data); 
    
    return $perl_data;
}


# getssi - get service sample interval
#
sub getssi {
    my ($data) = @_;

    my $ssi = $data->{'sampling_interval'}->{"$recid"};
    $ssi = 60 if (! defined $ssi);

    return $ssi;
}


# getlog - get log directory information
#
sub getlog {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    chklog($bpath);

    my $cpath = $data->{'log'}->{'current_path'};
    chklog($cpath);

    my $dpath = $data->{'log'}->{'daily_path'};
    chklog($dpath);

    return ( $bpath, $cpath, $dpath );
}


# writelog - write log message
#
sub writelog {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# cktime - check midnight time
#
sub cktime {

    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = 
       localtime(time);

    my $tcheck = sprintf ("%02d%02d", $hour, $min);

    my $yesterday = get_yesterday();

    # print "time check: $tcheck";

    if ($tcheck eq $logtime ) {
        writelog ("info: cktime - start log rotation");
        close ($rawlog);
	my $numkrd = rotate($clog, $dlog, $yesterday);
        writelog ("info: cktime - end log rotation, files rotated: $numkrd");
        $rawlog = open_file($fkrd);
    }

    return;
}


## 
sub rmkrd {
    my ($file) = @_;

    if ( -e $file ) {
        if (unlink($file) > 0) { return 0; } else { return 1; }
    }

    return;
}


## null the raw data
sub null2krd {

    my($blog, $clog ) = @_;

    opendir(DIR, $clog) or
        die "error: null2krd - Can't open $clog: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my @krds;
    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd$/;
        push @krds, $krd;
    }

    foreach my $krdf (@krds) {
        copy("$clog/$krdf", "$blog") or
           die "error: null2krd cannot copy krd file: $krdf $!\n";
         open my $fh, ">", "$clog/$krdf";
         close $fh;
    }

    return;
}


## rotate raw data
sub rotate {

    my($rawdir, $dailydir, $dstamp) = @_;

    opendir(DIR, $rawdir) or
        die "error: rotate - Can't open $rawdir: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$dstamp";

    my @krd_files;
    my $p = $recid . ".krd";

    foreach my $krd (@files) {
        next if $krd !~ /^$p$/;
        push @krd_files, $krd;
    }

    my $nkrd = $#krd_files + 1;

    if ($verbose) {
        writelog ("info: rotate - copying krd data files: $nkrd");
    }

    my $cnt = 0;
    # check if we have anything to move to daily
    if ( $nkrd > 0 ) {
   
        # make daily target dir
        unless(mkdir $dest) {
            writelog ("warning: rotate - $dstamp dir: $!");
        }

        foreach my $rawfile (@krd_files) {
            copy("$rawdir/$rawfile","$dest") or
                writelog ("error: rotate - copying previous daily data, $!");

            # reset to zero
            open my $ftkrd, ">", "$rawdir/$rawfile";
            close $ftkrd;

            $cnt++;
        }
    }

    # return number of raw krd files moved to daily
    return $cnt;
}


## get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf("%d-%02d-%02d", $yy, $mm, $dd);

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}


# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: cpurec [-lhV] | [interval [count]]
       cpurec -install auto
       cpurec -remove
 eg. 
  cpurec.exe                # default CLI mode, print per disk stats stdout
  cpurec.exe 1 5            # print per cpu stats 5 times, every 1s stdout
  cpurec.exe -l 25          # print per cpu stats, every 25s stdout and krdlog
  cpurec.exe -install auto  # run as a service, every 60s, default krdlog
  cpurec.exe -remove        # stop and remove the service 

 FIELDS:
   #01 timestamp  : seconds since Epoch, timea
   #02 cpuid      : cpu id
   #03 userpct    : userspace cpu utilization, percentage
   #04 syspct     : system cpu utilization, percentage
   #05 irqpct     : irq cpu utilization, percentage
   #06 dpcpct     : deffered procedure calls cpu, percentage 
   #07 privpct    : priviledged cpu utilization (dpc+irq), percentage
   #08 idlepct    : idle cpu utilization, percentage
   #09 totalpct   : total cpu utilization, percentage
END
    return;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
cpurec: 1.0.19, 2016-01-20 1628
END
    return;
}
