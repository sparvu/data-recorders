#
# Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

package PerlSvc;

use strict;
use warnings;
use Getopt::Long;
use Date::Calc qw(:all);
use File::Copy;
use Time::HiRes qw(time gettimeofday usleep tv_interval);
use Win32::OLE ('in');
use Sys::Hostname;
use Time::Local;
use Win32::Process;
use JSON;

# Debug Only
use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";

my $recid   = 'procrec';
my $cprefix = 'C:\\Program Files\\Kronometrix\\etc';
my ( $l, $v, $h, $V, $N ) = 0;
our %Config = ( ServiceName => $recid );

Getopt::Long::Configure('bundling');
my $result = GetOptions(
    "l|logging"        => \$l,
    "v|verbose"        => \$v,
    "h|help"           => \$h,
    "V|version"        => \$V,
    "n|name=s"         => \$Config{ServiceName},
    "N|processname=s"  => \$N

);

usage() if ( defined $h || !$result );
revision() if ( defined $V );

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $name_sem  = 0;
my $pname     = '';
my $loop      = 0;                     # current loop number
my $cf        = 'kronometrix.json';    # default json config
my $logtime   = '0000';                # min time check 23:59
my $stime;                           # sleep timer
my $last_time = 0;                   # first counter
my $procwmi   = 'Win32_PerfRawData_PerfProc_Process';
local $| = 1;                        # autoflush

my $verbose = defined $v ? $v : 0;
my $logging = defined $l ? $l : 0;


# check for processname flag
if ( defined $N ) {
    $name_sem = 1;
    $pname  = $N;
}


### MAIN BODY

# set HIGH priority
my $curentProcess;

my $pid = Win32::Process::GetCurrentProcessID();

if ( Win32::Process::Open( $curentProcess, $pid, 0 ) ) {
    $curentProcess->SetPriorityClass(HIGH_PRIORITY_CLASS);
}

# read configuration
my $cdata = open_config($cf);

my ( $blog, $clog, $dlog ) = get_log($cdata);

my $fname = $blog . "\\" . $recid . ".log";
my $fkrd  = $clog . "\\" . $recid . ".krd";

# log, rawlog files
my $log;
my $rawlog;

if ($logging) {
    $rawlog = open_file($fkrd);
    $log    = open_file($fname);
    write_log("info: started");
}

# get stats
my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
  or die "Cannot initialize WMI interface\n";

my $key = 'Name';

my @procstats = qw( 
ThreadCount          HandleCount 
IDProcess            ElapsedTime
PrivateBytes         VirtualBytes     PageFileBytes
PercentProcessorTime PercentPrivilegedTime 
PercentUserTime      TimeStamp_Sys100NS);

my $hash1 = {};

my $list = $wmi->InstancesOf($procwmi)
  or die "Failed to get instance object\n";

foreach my $w32 (in $list) {
    next if $w32->{$key} eq '_Total';
    map { $hash1->{ $w32->{$key} }->{$_} = $w32->{$_} } @procstats;
}

unless ( defined &ContinueRun ) {
    *ContinueRun      = sub { return 1 };
    *RunningAsService = sub { return 0 };
    Interactive();
}

if ( RunningAsService() ) {

    # get service sample interval
    $interval = get_ssi($cdata);
    $loop_max = 2**32;

    $rawlog = open_file($fkrd);
    $log    = open_file($fname);

    write_log("info: started");
}

### SUBROUTINES

sub Startup {

    while ( ContinueRun() ) {

        k_sleep();

        my ( $procname, $cpupct, $syspct, $usrpct, $vsz, $pbt, $pfb, $tc, $fds, $elp );
        my %pstat;

        my $list = $wmi->InstancesOf($procwmi)
          or die "Failed to get instance object\n";

        my $hash = {};

        foreach my $w32 ( in $list) {
            next if $w32->{$key} eq '_Total';
            map { $hash->{ $w32->{$key} }->{$_} = $w32->{$_} } @procstats;
        }

        #print "procs " . keys(%$hash) . ".\n";
        #print Dumper($hash);

        for my $k ( keys %$hash ) {

            next if $k =~ /procrec/;

            next if $k =~ /Idle/;

            # filter by name
	    if ( $name_sem == 1 ) {
	        next if $k !~ /$pname/;
	    }

            $cpupct = sprintf( "%.2f",
                get_value( $hash1->{"$k"}, $hash->{"$k"}, 'PercentProcessorTime' ) *
                  100 );

            $syspct = sprintf( "%.2f",
                get_value( $hash1->{"$k"}, $hash->{"$k"}, 'PercentPrivilegedTime' ) *
		  100 );

            $usrpct = sprintf( "%.2f",
		get_value( $hash1->{"$k"}, $hash->{"$k"}, 'PercentPrivilegedTime' ) * 
		  100 );

            $pid  = $hash1->{"$k"}->{IDProcess};
            $tc   = $hash1->{"$k"}->{ThreadCount};
            $fds  = $hash1->{"$k"}->{HandleCount};
            $vsz  = sprintf( "%.2f", $hash1->{"$k"}->{VirtualBytes} / 1048576 );
            $pbt  = sprintf( "%.2f", $hash1->{"$k"}->{PrivateBytes} / 1048576 );
            $pfb  = sprintf( "%.2f", $hash1->{"$k"}->{PageFileBytes} / 1048576 );

            $k =~ s/#// if $k =~ /\#/;
            $k =~ s/-// if $k =~ /\-/;
	    $procname = $k;

            $pstat{$k} =
              "$procname:$pid:$cpupct:$syspct:$usrpct:$vsz:$pbt:$pfb:$tc:$fds";

        }

        $hash1 = $hash;

        # end payload
        my $tnow = [gettimeofday];

        # cktime for rotation
        if ( RunningAsService() ) {
            cktime();
        }

        if ( $last_time > 0 ) {

            putraw( $$tnow[0], %pstat );

            $last_time = $$tnow[0];

        }
        else {

            putraw( $$tnow[0], %pstat );

            if ( !RunningAsService() ) {

                # check count, interval
                last if ++$loop == $loop_max;
            }

            $last_time = $$tnow[0];
            next;
        }

        if ( !RunningAsService() ) {

            # check count, interval
            last if ++$loop == $loop_max;
        }

    }    # while loop

    if ( RunningAsService() ) {
        write_log("info: stopped");
    }
}

sub Interactive {

    Install();

    if ( ( !defined $h ) and ( !defined $V ) ) {
        Startup();
    }
}

sub Install {

    if ( RunningAsService() ) {

        # check for proper config file
        if ( !defined $cdata ) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }

        if ( !defined $clog ) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }
    }

    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
    $Config{Description} = "Kronometrix $recid Service";

    return;
}

sub Remove {

    $Config{ServiceName} = $recid;
    return;
}

# k_sleep - sleeps exact number of usec
#
sub k_sleep {

    my $t     = [gettimeofday];
    my $next  = ( int( $t->[0] / $interval ) + 1 ) * $interval;
    my $delta = tv_interval( $t, [ $next, 0 ] );
    usleep( $delta * 1_000_000 );

    return;
}

# get_value - get delta between samples
#
sub get_value {

    my ( $h1, $h2, $property ) = @_;

    my $delta = 0;

    my $v2 = $h2->{$property};
    my $v1 = $h1->{$property};

    my $t2 = $h2->{'TimeStamp_Sys100NS'};
    my $t1 = $h1->{'TimeStamp_Sys100NS'};

    eval { $delta = ( ( $v2 - $v1 ) / ( $t2 - $t1 ) ); };

    if ($@) {
        chomp($@);
        write_log("$@");
        write_log("v2=$v2 v1=$v1 t2=$t2 t1=$t1");
    }

    $delta = 1 if $delta > 1;

    return $delta;
}

# print_raw - print krd raw data
#
sub putraw {
    my ( $traw, %c ) = @_;

    if ( RunningAsService() ) {

        for my $k ( sort keys %c ) {
            printf $rawlog "%s:%s\n", $traw, $c{$k};
        }

    }
    else {
        if ($logging) {

            for my $k ( sort keys %c ) {
                printf $rawlog "%s:%s\n", $traw, $c{$k};
            }

        }

        for my $k ( sort keys %c ) {
            printf "%s:%s\n", $traw, $c{$k};
        }
    }
}

# chklog - check log directory
#
sub chklog {

    my ($dir) = @_;

    if ( defined $dir ) {
        if ( !-d $dir ) {
            die "error: chklog - cannot find $dir directory";
        }
    }
    else {
        die "error: chklog - cannot find $dir directory";
    }

    return;
}

# open_data - open data file
#

sub open_file {

    my ($file) = @_;
    my $fh;

    if ( -f $file ) {
        open $fh, "+>>", "$file"
          or die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select( ( select($fh), $| = 1 )[0] );

    }
    else {
        open $fh, "+>", "$file"
          or die "error: open_file - cannot open $file $!";
        select( ( select($fh), $| = 1 )[0] );

    }

    return $fh;
}

# open_config - open JSON configuration file
#
sub open_config {

    my ($conf) = @_;
    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                die "error: open_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
            }
        }
        else {
            if ( -e "$cprefix\\$conf" ) {
                open my $fh, "<", "$cprefix\\$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                die "error: open_config - $! $conf \n";
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}

# get_Ssi - get service sample interval
#
sub get_ssi {
    my ($data) = @_;
    my $ssi;

    my $rpref = substr( $recid, 0, -3 );

    my @recs = @{ $data->{'message'} };

    foreach my $rh (@recs) {
        next if ( $rh->{'name'} ne $rpref );
        $ssi = $rh->{'sample'};
    }

    $ssi = 60 if ( !defined $ssi );

    return $ssi;
}

# get_log - get log directory information
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    chklog($bpath);

    my $cpath = $data->{'log'}->{'current_path'};
    chklog($cpath);

    my $dpath = $data->{'log'}->{'daily_path'};
    chklog($dpath);

    return ( $bpath, $cpath, $dpath );
}

# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
      $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if ( eof $log ) {
        print $log "$dt $logbuf\n";
    }
    else {
        print $log "\n$dt $logbuf";
    }

    return;
}

# cktime - check midnight time
#
sub cktime {

    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    my $tcheck = sprintf( "%02d%02d", $hour, $min );

    my $yesterday = get_yesterday();

    # print "time check: $tcheck";

    if ( $tcheck eq $logtime ) {

        # write_log ("info: cktime - start log rotation");
        close($rawlog);
        my $numkrd = rotate( $clog, $dlog, $yesterday );

        # write_log ("info: cktime - end log rotation, files rotated: $numkrd");
        $rawlog = open_file($fkrd);
    }

    return;
}

##
sub rmkrd {
    my ($file) = @_;

    if ( -e $file ) {
        if   ( unlink($file) > 0 ) { return 0; }
        else                       { return 1; }
    }

    return;
}

## null the raw data
sub null2krd {

    my ( $blog, $clog ) = @_;

    opendir( DIR, $clog )
      or die "error: null2krd - Can't open $clog: $!";
    my @files = grep { !/^\.+$/ } readdir(DIR);
    close(DIR);

    my @krds;
    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd$/;
        push @krds, $krd;
    }

    foreach my $krdf (@krds) {
        copy( "$clog/$krdf", "$blog" )
          or die "error: null2krd cannot copy krd file: $krdf $!\n";
        open my $fh, ">", "$clog/$krdf";
        close $fh;
    }

    return;
}

## rotate raw data
sub rotate {

    my ( $rawdir, $dailydir, $dstamp ) = @_;

    opendir( DIR, $rawdir )
      or die "error: rotate - Can't open $rawdir: $!";
    my @files = grep { !/^\.+$/ } readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$dstamp";

    my @krd_files;
    my $p = $recid . ".krd";

    foreach my $krd (@files) {
        next if $krd !~ /^$p$/;
        push @krd_files, $krd;
    }

    my $nkrd = $#krd_files + 1;

    if ($verbose) {
        write_log("info: rotate - copying krd data files: $nkrd");
    }

    my $cnt = 0;

    # check if we have anything to move to daily
    if ( $nkrd > 0 ) {

        # make daily target dir
        mkdir $dest if ( !-d $dest );

        #unless(mkdir $dest) {
        #    write_log ("warning: rotate - $dstamp dir: $!");
        #}

        foreach my $rawfile (@krd_files) {
            copy( "$rawdir/$rawfile", "$dest" )
              or write_log("error: rotate - copying previous daily data, $!");

            # reset to zero
            open my $ftkrd, ">", "$rawdir/$rawfile";
            close $ftkrd;

            $cnt++;
        }
    }

    # return number of raw krd files moved to daily
    return $cnt;
}

## get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf( "%d-%02d-%02d", $yy, $mm, $dd );

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}

# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: procrec [-lhV] | [interval [count]]
       procrec -install auto
       procrec -remove
 eg. 
  procrec.exe                # default CLI mode, print per disk stats stdout 
  procrec.exe -N name        # monitor a list of processes with a specific name,
                             # where name is a Perl regex
  procrec.exe -P pid,...     # monitor a list of processes, using process IDs
  procrec.exe -install auto  # run as a service, every 60s, default krdlog
  procrec.exe -remove        # stop and remove the service 

 FIELDS:
   #01 timestamp  : seconds since Epoch, timea
   #02 process    : process name, string
   #03 pid        : process id, number
   #04 cpupct     : userspace cpu utilization, percentage
   #05 syspct     : system cpu utilization, percentage
   #06 userpct    : userspace cpu utilization, percentage
   #07 vsz        : virtual address space size, in MB, number
   #08 pbt        : private bytes segment, in MB, number
   #09 pfb        : page file bytes, used in the paging file, in MB, number
   #10 threads    : number of threads per process, number
   #11 fds        : number of file descriptors, number

 NOTES:
   Data source: Win32_PerfRawData_PerfProc_Process

END
    return;
}

# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
procrec: 1.0.5, 2017-02-21 0001
END
    return;
}
