#
# Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

package PerlSvc;

use strict;
use warnings;
use JSON;
use File::Copy;
use File::stat;
use Tie::IxHash;
use File::Spec;
use Getopt::Long;
use File::Find;
no warnings 'File::Find';
use Filesys::DiskUsage qw(du);
use Time::HiRes qw(time gettimeofday usleep tv_interval);
use Date::Calc qw(:all);
use Time::Local;
use Win32::Process;

# Debug Only
#use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";

my $recid   = 'direc';
my $cprefix = 'C:\\Program Files\\Kronometrix\\etc';
my ( $l, $v, $h, $V ) = 0;
our %Config = ( ServiceName => $recid );

Getopt::Long::Configure('bundling');
my $result = GetOptions(
    "v|verbose" => \$v,
    "h|help"    => \$h,
    "V|version" => \$V,
    "n|name=s"  => \$Config{ServiceName}
);

usage() if ( defined $h || !$result );
revision() if ( defined $V );

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $loop  = 0;               # current loop number
my $cfile = 'direc.json';    # configuration file
my $cdata;                   # configuration data
my $kfile = 'kronometrix.json';    # configuration file
my $rawfile;                       # krd raw data file
my $kdata;                         # configuration data
my ( $baselog, $curlog, $dirlog, $log );    # logs
my $logtime = '0000';                       # min time check 23:59
my $stime;                                  # sleep timer
my $last_time = 0;                          # first counter
my $files;
my $dirs;
local $| = 1;                               # autoflush

my $verbose = defined $v ? $v : 0;
my $logging = defined $l ? $l : 0;

### MAIN BODY

# set HIGH priority
my $curentProcess;

my $pid = Win32::Process::GetCurrentProcessID();

if ( Win32::Process::Open( $curentProcess, $pid, 0 ) ) {
    $curentProcess->SetPriorityClass(HIGH_PRIORITY_CLASS);
}

# read k configuration
$kdata = open_config($kfile);
my ( $blog, $clog, $dlog ) = get_log($kdata);
my $fname = $blog . "\\" . $recid . ".log";
my $fkrd  = $clog . "\\" . $recid . ".krd";

# read configuration
$cdata = open_config($cfile);

# directories
tie my %work, "Tie::IxHash";
%work = get_dir($cdata);

# log, rawlog files
my $rawlog;

if ($logging) {
    $rawlog = open_file($fkrd);
    $log    = open_file($fname);
    write_log("info: started");
}

unless ( defined &ContinueRun ) {
    *ContinueRun      = sub { return 1 };
    *RunningAsService = sub { return 0 };
    Interactive();
}

if ( RunningAsService() ) {

    # get service sample interval
    $interval = get_ssi($kdata);
    $loop_max = 2**32;

    $rawlog = open_file($fkrd);
    $log    = open_file($fname);

    write_log("info: started");
}

### SUBROUTINES

sub Startup {

    while ( ContinueRun() ) {

        k_sleep();

        my %dirs;

        for my $key ( keys %work ) {

            $dirs  = 0;
            $files = 0;

            my $value = $work{$key};
            my $desc  = $value;
            next if ( !-d $key );

            my $mod_time = stat($key)->mtime;
            my $chg_time = stat($key)->ctime;

            # SAVE STDERR
            #open *OLDSTDERR, '>&STDERR';
            get_fds($key);

            # RESTORe STDERR
            #open *STDERR, '>&OLDSTDERR' or
            #   die "Cannot restore STDERR: $!\n";
            #close OLDSTDERR;

            my $size;
            my %sizes = du( { 'make-hash' => 1 }, $key );
            foreach my $entry ( sort { $sizes{$a} <=> $sizes{$b} } keys %sizes )
            {
                $size = sprintf( "%.f", $sizes{$entry} );
            }

            $key =~ s/\s//g;
            $key =~ s/:\\/_/g;
            $key =~ s/\\/_/g;

            my $msize = sprintf( "%.2f", $size / ( 1024 * 1024 ) );

            $dirs{$key} = "$key:$files:$dirs:$chg_time:$mod_time:$msize";

            # print dir statistics
            # printf "%s:%s:%d:%d:%d:%d:%.f\n",
            #  time, $key, $files, $dirs, $chg_time, $mod_time, $size;

        }

        # end payload
        my $tnow = [gettimeofday];

        # cktime for rotation
        if ( RunningAsService() ) {
            cktime();
        }

        if ( $last_time > 0 ) {

            putraw( $$tnow[0], %dirs );

            $last_time = $$tnow[0];

        }
        else {

            putraw( $$tnow[0], %dirs );

            if ( !RunningAsService() ) {

                # check count, interval
                last if ++$loop == $loop_max;
            }

            $last_time = $$tnow[0];
            next;
        }

        if ( !RunningAsService() ) {

            # check count, interval
            last if ++$loop == $loop_max;
        }

    }    # while loop

    if ( RunningAsService() ) {
        write_log("info: stopped");
    }
}

sub Interactive {

    Install();

    if ( ( !defined $h ) and ( !defined $V ) ) {
        Startup();
    }
}

sub Install {

    if ( RunningAsService() ) {

        # check for proper config file
        if ( !defined $kdata ) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }

        if ( !defined $clog ) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }
    }

    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
    $Config{Description} = "Kronometrix $recid Service";

    return;
}

sub Remove {

    $Config{ServiceName} = $recid;
    return;
}

# k_sleep - sleeps exact number of usec
#
sub k_sleep {

    my $t     = [gettimeofday];
    my $next  = ( int( $t->[0] / $interval ) + 1 ) * $interval;
    my $delta = tv_interval( $t, [ $next, 0 ] );
    usleep( $delta * 1_000_000 );

    return;
}

# print_raw - print krd raw data
#
sub putraw {
    my ( $traw, %d ) = @_;

    if ( RunningAsService() ) {

        for my $k ( sort keys %d ) {
            printf $rawlog "%s:%s\n", $traw, $d{$k};
        }

    }
    else {
        if ($logging) {

            for my $k ( sort keys %d ) {
                printf $rawlog "%s:%s\n", $traw, $d{$k};
            }

        }

        for my $k ( sort keys %d ) {
            printf "%s:%s\n", $traw, $d{$k};
        }
    }
}

# chklog - check log directory
#
sub chklog {

    my ($dir) = @_;

    if ( defined $dir ) {
        if ( !-d $dir ) {
            die "error: chklog - cannot find $dir directory";
        }
    }
    else {
        die "error: chklog - cannot find $dir directory";
    }

    return;
}

# open_data - open data file
#

sub open_file {

    my ($file) = @_;
    my $fh;

    if ( -f $file ) {
        open $fh, "+>>", "$file"
          or die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select( ( select($fh), $| = 1 )[0] );

    }
    else {
        open $fh, "+>", "$file"
          or die "error: open_file - cannot open $file $!";
        select( ( select($fh), $| = 1 )[0] );

    }

    return $fh;
}

# open_config - open JSON configuration file
#
sub open_config {

    my ($conf) = @_;
    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                die "error: open_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
            }
        }
        else {
            if ( -e "$cprefix\\$conf" ) {
                open my $fh, "<", "$cprefix\\$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                die "error: open_config - $! $conf \n";
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}

# get_ssi - get service sample interval
#
sub get_ssi {
    my ($data) = @_;
    my $ssi;

    my $rpref = substr( $recid, 0, -3 );

    my @recs = @{ $data->{'message'} };

    foreach my $rh (@recs) {
        next if ( $rh->{'name'} ne $rpref );
        $ssi = $rh->{'sample'};
    }

    $ssi = 60 if ( !defined $ssi );

    return $ssi;
}

# get_log - get log directory information
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    chklog($bpath);

    my $cpath = $data->{'log'}->{'current_path'};
    chklog($cpath);

    my $dpath = $data->{'log'}->{'daily_path'};
    chklog($dpath);

    return ( $bpath, $cpath, $dpath );
}

# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
      $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if ( eof $log ) {
        print $log "$dt $logbuf\n";
    }
    else {
        print $log "\n$dt $logbuf";
    }

    return;
}

# cktime - check midnight time
#
sub cktime {

    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    my $tcheck = sprintf( "%02d%02d", $hour, $min );

    my $yesterday = get_yesterday();

    # print "time check: $tcheck";

    if ( $tcheck eq $logtime ) {

        # write_log ("info: cktime - start log rotation");
        close($rawlog);
        my $numkrd = rotate( $clog, $dlog, $yesterday );

        # write_log ("info: cktime - end log rotation, files rotated: $numkrd");
        $rawlog = open_file($fkrd);
    }

    return;
}

##
sub rmkrd {
    my ($file) = @_;

    if ( -e $file ) {
        if   ( unlink($file) > 0 ) { return 0; }
        else                       { return 1; }
    }

    return;
}

## null the raw data
sub null2krd {

    my ( $blog, $clog ) = @_;

    opendir( DIR, $clog )
      or die "error: null2krd - Can't open $clog: $!";
    my @files = grep { !/^\.+$/ } readdir(DIR);
    close(DIR);

    my @krds;
    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd$/;
        push @krds, $krd;
    }

    foreach my $krdf (@krds) {
        copy( "$clog/$krdf", "$blog" )
          or die "error: null2krd cannot copy krd file: $krdf $!\n";
        open my $fh, ">", "$clog/$krdf";
        close $fh;
    }

    return;
}

## rotate raw data
sub rotate {

    my ( $rawdir, $dailydir, $dstamp ) = @_;

    opendir( DIR, $rawdir )
      or die "error: rotate - Can't open $rawdir: $!";
    my @files = grep { !/^\.+$/ } readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$dstamp";

    my @krd_files;
    my $p = $recid . ".krd";

    foreach my $krd (@files) {
        next if $krd !~ /^$p$/;
        push @krd_files, $krd;
    }

    my $nkrd = $#krd_files + 1;

    if ($verbose) {
        write_log("info: rotate - copying krd data files: $nkrd");
    }

    my $cnt = 0;

    # check if we have anything to move to daily
    if ( $nkrd > 0 ) {

        # make daily target dir
        mkdir $dest if ( !-d $dest );

        #unless(mkdir $dest) {
        #    write_log ("warning: rotate - $dstamp dir: $!");
        #}

        foreach my $rawfile (@krd_files) {
            copy( "$rawdir/$rawfile", "$dest" )
              or write_log("error: rotate - copying previous daily data, $!");

            # reset to zero
            open my $ftkrd, ">", "$rawdir/$rawfile";
            close $ftkrd;

            $cnt++;
        }
    }

    # return number of raw krd files moved to daily
    return $cnt;
}

## get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf( "%d-%02d-%02d", $yy, $mm, $dd );

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}

# get directory definition
sub get_dir {

    my ($data) = @_;
    tie my %dirs, "Tie::IxHash";

    my @temp;
    eval { @temp = @{ $data->{'directory'} }; };
    if ($@) { die "Error: syntax error direc.json, check directory"; }

    foreach my $f (@temp) {
        my $dir  = $f->{'name'};
        my $desc = $f->{'description'};

        my $keyapp = $dir;
        my $hvalue = $desc;

        $dirs{$keyapp} = $hvalue;
    }

    return %dirs;
}

sub get_fds {

    my ($dir) = @_;
    local $^W;

    open STDERR, '>', File::Spec->devnull() or die "Cannot open STDERR: $!\n";
    find(
        sub {
         # $_ contains the name of the current file
         # $File::Find::name contains the full path of the current file relative
         #  to the directory given to the find() function
         # $File::Find::dir contains the name of the current directory
         # print "Processing: $_ \n";

            if (-d) {    # if file is a directory
                $dirs++;
            }
            elsif (-f) {
                $files++;
            }
            else { return; }
        },
        $dir
    );

    return;
}

# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: direc [-hvV] | [interval]
OPTIONS:
  -h        : help information
  -v        : verbose information
  -V        : release version
  interval  : maximum number of seconds between samples

 FIELDS:
  #01 timestamp : seconds since Epoch, time
  #02 name : directory name, string
  #03 number of files, number
  #04 number of sub directories, number
  #05 time of last status change, seconds
  #06 time of last modification, seconds
  #07 capacity in MBytes
 
 NOTES:
  The recorder uses direc.json configuration file
END
    exit 0;
}

# revision - print revision and exit
sub revision {
    print STDERR <<END;
direc: 1.1.2, 2016-10-26 1400
END
    exit 0;
}
