#!/opt/kronometrix/perl/bin/perl
#
# Copyright (c) 2009-2022 Stefan Parvu (www.kronometrix.org).
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Getopt::Std;
use Net::Ping;
use Tie::IxHash;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use POSIX qw(pause);

###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hlvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [interval [count]],
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

###  Variables
my $loop = 0;                           # current loop number
$main::opt_h = 0;                       # help option
$main::opt_V = 0;                       # revision option
my $cfile = 'svcrec.json';              # configuration file
my $cdata;                              # configuration data
my $tp = 0;                             # time precision
my $kfile     = 'kronometrix.json';     # configuration file
my $rawfile;                            # krd raw data file
my $kdata;                              # configuration data
my ($baselog, $curlog, $certlog, $log); # logs
local $| = 1;

### MAIN BODY #

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

# read configuration
$cdata = open_config($cfile);

# services
tie my %work, "Tie::IxHash";
%work = get_svc($cdata);

# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rawfile = $curlog . '/' . 'svcrec' . '.krd';
    $certlog = $baselog . "/svcrec.log";
    $log = open_file($certlog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

# get it as verbose
if ($verbose) {
    if ($logging) {
        write_log ("Total workload requests: " . keys(%work));
    } else {
        print "Total workload requests: " . keys(%work) . ".\n";
    }
}


# main loop
while (1) {

    my $rawkrd;

    if ($logging) {
        $rawkrd = open_file($rawfile);
    }

    # now time

    for my $key (keys %work) {
        
        my $value = $work{$key};

        my ($name, $id, $desc, $siteid, $zone) = split( /:/, $key );
        my ($host, $port, $type) = split( /:/, $value );

        my $idn;
        if ($name) {
            $idn = $name;
        } else {
            $idn = $id;
        }

        if ($verbose) {
            print "name=$idn siteid=$siteid zone=$zone host=$host port=$port type=$type\n";
        }

        my $t0 = time;
        my $p = Net::Ping->new("tcp", 2);
        $p->hires();
        $p->port_number($port);
        my ($ret, $duration, $ip) = $p->ping($host, 5);

        my $status = 0;
        my $pktime = 'NA';
        $type = uc $type;
        my $proto = $type . "(" . $port . ")"; 

        if($ret) {
            $status = 1;
            $pktime = sprintf ("%.2f", 1000 * $duration);
        }

        if ($logging) {          
            printf $rawkrd "%.${tp}f:%s:%s:%s:%s:%s:%d\n", $t0, $idn, $pktime, $siteid, $zone, $proto, $status;
        } else {
            printf "%.${tp}f:%s:%s:%s:%s:%s:%d\n", $t0, $idn, $pktime, $siteid, $zone, $proto, $status;
        }

        # close ping connection
        $p->close;

        sleep 0.1;
    }

    if ($logging) {
        close ($rawkrd);
    }

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;
}



### Subroutines


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


## configuration file
# open JSON configuration file
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


sub reload_config {

    write_log("info: main - signal HUP received, reload armed...");

    $cdata = open_config($cfile);

    ## hostid
    # get_hostid($cdata);

    ## platform destination
    # %work = get_workload($cdata);

    return;
}


# get service defintion
sub get_svc {

    my ($data) = @_;
    tie my %svcs, "Tie::IxHash";

    my @temp = @{ $data->{'server'} };

    foreach my $f (@temp) {

        my $name    = $f->{'name'};
        my $desc    = $f->{'description'};
        my $icao    = $f->{'zone'};

        my @reqs = @{ $f->{'service'} };

        foreach my $req (@reqs) {
            my $id   = $req -> {'id'};
            my $host = $req -> {'host'};
            my $type = $req -> {'type'};
            my $port = $req -> {'port'};

            my $keyapp;
            if ($name) {
                $keyapp = $name . '_' . $id . ':' . $id . ':' . $desc . ':' . $name . ':' . $icao;
            } else { 
                $keyapp = $name . ':' . $id . ':' . $desc . ':' . $id . ':' . $icao;
            }
                
            my $hvalue = $host . ':' . $port . ':' . $type;

            $svcs{$keyapp} = $hvalue;
        }
    }

    return %svcs;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: svcrec [-hlvV] | [interval]
OPTIONS:
  -h        : help information
  -l        : log raw data to krd file, no STDOUT
  -v        : verbose information
  -V        : release version
  interval  : maximum number of seconds between samples

 FIELDS:
  #01 timestamp : UNIX time, number
  #02 name      : service name, string
  #03 duration  : paket return time in ms, number
  #04 siteid    : the site-id for request
  #05 zone      : location, can be ICAO code, geo lat/lon, address
  #06 inventory : service inventory description, string
  #07 status    : service status 1(active) and 0(not active)

 NOTES:
END
    exit 0;
}

# revision - print revision and exit
sub revision {
    print STDERR <<END;
svcrec: 1.1.3, 2017-02-07 1613
END
    exit 0;
}
