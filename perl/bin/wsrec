#!/opt/kronometrix/perl/bin/perl

# Copyright (c) 2014 Steve Cliffe (steve@sjcnet.id.au)
# Copyright (c) 2006-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Steve Cliffe
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Device::USB;
use Carp::Assert;
use Getopt::Std;
use POSIX qw(sysconf pause strftime);
use Time::HiRes qw(setitimer ITIMER_REAL);

# Debug
# use Data::Dumper;

# Fine Offset WH1080
my $VENDOR = 0x1941;
my $PRODUCT = 0x8021;

my $wu_upload_file = "/tmp/wu-wupload.htx"; # Set to empty string to disable

#
# Command line arguments
#
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('dghlpV') or usage();
usage() if defined $main::opt_h;
revision() if defined $main::opt_V;

my $csv   = defined $main::opt_p ? $main::opt_p : 0;
my $deg   = defined $main::opt_g ? $main::opt_g : 0;
my $debug = defined $main::opt_d ? $main::opt_d : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [[interval [count]]
my ($interval, $loop_max);
if (defined $ARGV[0]) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1; 
}

my $rawfile;                            # krd raw data file
my $loop          = 0;                  # current loop number
my $PAGESIZE      = 25;                 # max lines per header
my $line          = $PAGESIZE;          # counter for lines printed
my $max_rain_jump = 10;	                # To filter out spurios rainfall spikes
my $kfile         = 'kronometrix.json'; # configuration file
$main::opt_h      = 0;                  # help option
$main::opt_V      = 0;                  # revision option
$main::opt_g      = 0;                  # wind degrees option
$main::opt_d      = 0;                  # debug mode option
$main::opt_l      = 0;                  # logging option
my ($cdata, $kdata);                    # configuration data
my ($baselog, $curlog, $wlog, $log);
$| = 1;                                 # autoflush

# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rawfile = $curlog . '/' . 'wsrec' . '.krd';
    $wlog = $baselog . "/wsrec.log";
    $log = open_file($wlog);
    *STDERR = $log;

    write_log ("info: started");
}

##
## Main Loop
##

my $dev = 0;
my @hourly_rain = ((0) x 60);
my @daily_rain = ((0) x (60*24));
my @wind_dirs = ('N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW');
my @wind_dirs_degs = ('0', '22', '45', '67', '90', '112', '135', '157', '180', '202', '225', '247', '270', '292', '315', '337');
my $previous_rain = 0;

# how often do we trigger
my $first_interval = $interval;

# signal handler is empty, do nothing
$SIG{ALRM} = sub {};

# first value is the initial wait, second is the wait thereafter
setitimer(ITIMER_REAL, $first_interval, $interval);

$SIG{'INT'} = 'close_ws';
$SIG{'TERM'} = 'close_ws';

my $usb = Device::USB->new();
$dev = open_ws($usb);

if (defined $dev) {
    if($dev == 0) {
        if ($logging) {
            printf $log "Couldn't connect to the Weather Station WH1080\n";
            exit 1;
        } else {
            printf "Couldn't connect to the Weather Station WH1080\n";
            exit 1;
        }
    }
} else {
    if ($logging) {
        printf $log "Couldn't connect to the Weather Station WH1080\n";
        exit 1;
    } else {
        printf "Couldn't connect to the Weather Station WH1080\n";
        exit 1;
    }
}

# Loop forever polling the Weather Station

while (1) {
    if (! $dev) { $dev = open_ws($usb); sleep 5; next; }

    # Get the first 32 bytes of the fixed block
    my $fixed_block = read_block($dev, 0);
    if ($debug) {
        print_bytes($fixed_block, 32);
    }

    if (unpack('C', $fixed_block) != 0x55) {
        if ($logging) {
            printf $log "Error: Got a dud fixed block - reconnecting\n";
        } else {
            printf STDERR "Error: Got a dud fixed block - reconnecting\n";
        }
        $dev->release_interface(0);
	undef $dev;
        sleep 5;
        $dev = open_ws($usb);
        next;
    }

    # Get the current weather record

    my $curpos = unpack('x30S',$fixed_block);
    my $current_block = read_block($dev, $curpos);
    if ($debug) {
        print_bytes($current_block, 32);
        if ($logging) {
            printf $log "Current position is %x\n", $curpos;
        } else {
            printf "Current position is %x\n", $curpos;
        }
    }

    if ($line >= $PAGESIZE) {
        # print human readable
        if ($csv == 0) {
            printf "%8s %3s %3s %5s %5s %5s %5s %5s %5s %4s %4s %4s %5s %6s\n",
                   "Time", "IRh", "ORh", "ITa", "OTa", "OTd", "OTwc", 
                   "Wind", "Wgust", "Wdir",
                   "R1h", "R24h", "TR", "Pa";
        }
        $line = 0;
    }
	
    # Decode current stats
	
    my $indoor_humidity = unpack('xC', $current_block);
    my $tlsb = unpack('xxC', $current_block);
    my $tmsb = unpack('xxxC', $current_block) & 0x7f;
    my $tsign = unpack('xxxC', $current_block) >> 7;
    my $indoor_temperature = ($tmsb * 256 + $tlsb) * 0.1;
    if ($tsign) {
        $indoor_temperature *= -1;
    }
	
    my $outdoor_humidity = unpack('x4C', $current_block);
    $tlsb = unpack('x5C', $current_block);
    $tmsb = unpack('x6C', $current_block) & 0x7f;
    $tsign = unpack('x6C', $current_block) >> 7;
    my $outdoor_temperature = ($tmsb * 256 + $tlsb) * 0.1;
    if ($tsign) {
        $outdoor_temperature *= -1;
    }

    my $abs_pressure= unpack('x7S', $current_block) * 0.1;
    my $wind = unpack('x9C', $current_block);
    my $gust = unpack('x10C', $current_block);
    my $wind_extra = unpack('x11C', $current_block);
    my $wind_dir = unpack('x12C', $current_block);
    #print "wind_dir $wind_dir\n";
    my $total_rain = unpack('x13S', $current_block) * 0.3;
    my $wind_speed = ($wind + (($wind_extra & 0x0F) <<8)) * 0.38;# Was 0.1
    my $gust_speed = ($gust + (($wind_extra & 0xF0) <<4)) * 0.38;# Was 0.1
    my $outdoor_dew_point = 
    dew_point($outdoor_temperature, $outdoor_humidity);
    my $wind_chill_temp = wind_chill($outdoor_temperature, $wind_speed);

    # Calculate rainfall rates
	
    if ($previous_rain == 0) {
        $previous_rain = $total_rain;
    }

    my $rain_diff = $total_rain - $previous_rain;

    if ($rain_diff > $max_rain_jump) {	# Filter rainfall spikes
        $rain_diff = 0;
	$total_rain = $previous_rain;
    }

    $previous_rain = $total_rain;
    shift @hourly_rain;
    shift @daily_rain;
    push @hourly_rain, $rain_diff;
    push @daily_rain, $rain_diff;
    my $hourly_rain_rate = 0;
    my $daily_rain_rate = 0;
    ($hourly_rain_rate += $_) for @hourly_rain;
    ($daily_rain_rate += $_) for @daily_rain;

    # wind direction: degrees
    my $wdf = 'NA';

    if ($deg) {
        if($wind_dirs_degs[$wind_dir]) {
            $wdf = $wind_dirs_degs[$wind_dir];
        }
    } else { 
        if($wind_dirs[$wind_dir]) {
            $wdf = $wind_dirs[$wind_dir];
        }
    }
   	
    if ($csv == 1) {
        if ($logging) {
            my $rawkrd = open_file($rawfile);
            printf $rawkrd "%d:%d:%d:%.1f:%.1f:%.1f:%.1f:%.1f:%.1f:%s:%.1f:%.1f:%.1f:%.1f\n",
                   time, $indoor_humidity, $outdoor_humidity, 
                   $indoor_temperature, $outdoor_temperature, 
                   $outdoor_dew_point, $wind_chill_temp, $wind_speed, 
                   $gust_speed, $wdf, 
                   $hourly_rain_rate, $daily_rain_rate, $total_rain,
                   $abs_pressure;
            close ($rawkrd);
        } else {
	    printf "%d:%d:%d:%.1f:%.1f:%.1f:%.1f:%.1f:%.1f:%s:%.1f:%.1f:%.1f:%.1f\n",
	           time, $indoor_humidity, $outdoor_humidity, 
                   $indoor_temperature, $outdoor_temperature, 
	           $outdoor_dew_point, $wind_chill_temp, $wind_speed, 
                   $gust_speed, $wdf, 
                   $hourly_rain_rate, $daily_rain_rate, $total_rain,
                   $abs_pressure;
        }
    } else {
        my @Time = localtime();
        printf 
               "%02d:%02d:%02d %3d %3d %5.1f %5.1f %5.1f %5.1f %5.1f %5.1f %4s %4.1f %4.1f %4.1f %6.1f\n", 
               $Time[2], $Time[1], $Time[0],
               $indoor_humidity,
               $outdoor_humidity,
	       $indoor_temperature,
	       $outdoor_temperature,
	       $outdoor_dew_point,
	       $wind_chill_temp,
	       $wind_speed,
	       $gust_speed,
	       $wdf,
	       $hourly_rain_rate,
	       $daily_rain_rate,
	       $total_rain,
	       $abs_pressure;

        # add a newline for clarity in debug mode
        print "\n" if ($debug);

        $line++;
    }
        
    # Write template file for Weather Underground upload

    if (length ($wu_upload_file) > 0) {
        open (FH, ">$wu_upload_file")
	or die ("Unable to open $wu_upload_file : $!");
        my $now_date = strftime "%m/%d/%y", localtime;
        my $now_time = strftime "%H:%M", localtime;
        print (FH "stationDate=$now_date\n");
        print (FH "stationTime=$now_time\n");
        print (FH "windDir=$wdf\n");
        print (FH "wind10Avg=$wind_speed\n");
        print (FH "windSpeed=$gust_speed\n");
        print (FH "outsideHumidity=$outdoor_humidity\n");
        print (FH "outsideTemp=$outdoor_temperature\n");
        print (FH "dailyRain=$daily_rain_rate\n");
        print (FH "barometer=$abs_pressure\n");
        print (FH "tempUnit=C\n");
        print (FH "windUnit=km/h\n");
        print (FH "barUnit=hPa\n");
        print (FH "rainUnit=mm\n");
        close (FH);
    }
		
    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;
}


### Subroutines

# configuration file
# open JSON configuration file
#
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


# Connect to the Weather Station
#
sub open_ws {

        my $usb = shift;
        my $namebuf = "\0" x 256;
        my $dev = $usb->find_device($VENDOR, $PRODUCT);

        return if (! $dev);

        $dev->open();

        my $xv = $dev->get_driver_np(0, $namebuf, 256);
        $dev->detach_kernel_driver_np(0);
         
        if ($dev->claim_interface(0) != 0) {
                printf "usb_claim_interface failed\n";
                return 0;
        }

        $dev->set_altinterface(0);

        return $dev;
}


##
## Close the connection to the Weather Station & exit
##

sub close_ws {
    if ($dev) {
        $dev->release_interface(0);
    }

    exit 0;
}

##
## Dump a buffer in hex for debugging purposes
##

sub print_bytes {
	my $buf = shift;
	my $len = shift;
   
	if ($len <= 0) {
		return;
	}
	my @bytes = unpack("C$len", $buf);

    	if ($len > 0) {
        	for (my $i=0; $i<$len; $i++) {
            		printf "%02x ", $bytes[$i];
        	}
    	}
	printf "\n";
}

##
## Read a 32 byte block of data from the WS
##

sub read_block {
	my $dev = shift;
	my $offset = shift;
        my $buf;
        my $xbuf = "\0" x 256;

	my $lsb = $offset & 0xFF;
	my $msb = $offset >>8 & 0xFF;
	my $tbuf = pack('CCCCCCCC', 0xA1, $msb, $lsb, 32, 0xA1, $msb, $lsb, 32);
        my $retval = $dev->control_msg(0x21, 9, 0x200, 0, $tbuf, 8, 1000);
        my $count = $dev->interrupt_read(0x81, $buf, 32, 1000);
	if ($debug) {
                printf ("Retval: %d, Read %d bytes\n", $retval, $count);
        }

	return $buf;
}

##
## Return dew point based on temperature & humidity
##
## http://en.wikipedia.org/wiki/Dew_Point
##

sub dew_point {
	my $temp = shift;
	my $humidity = shift;
	$humidity /= 100.0;
	my $gamma = (17.271 * $temp) / (237.7 + $temp) + log($humidity) ;
	return (237.7 * $gamma) / (17.271 - $gamma);
}

##
## Return wind chill temp based on temperature & wind speed
##
## http://en.wikipedia.org/wiki/Wind_chill
##

sub wind_chill {
	my $temp = shift;
	my $wind = shift;

	my $wind_kph = 3.6 * $wind;
	if (($wind_kph <= 4.8) || ($temp > 10.0)) {
		return $temp;
	}
	my $wct = 13.12 + (0.6215 * $temp) - (11.37 * ($wind_kph ** 0.16)) + (0.3965 * $temp * ($wind_kph ** 0.16));
	if ($wct < $temp) {
		return $wct;
	} else {
		return $temp;
	}
}


##
## usage - print usage and exit.
##
sub usage {
        print STDERR <<END;
USAGE: wsrec [-dgp] | [interval [count]]
   eg, wsrec           # print human readable output
       wsrec 5         # print every 5 seconds
       wsrec 1 5       # print 5 times, every 1 second, human format output
       wsrec -p 60     # print every 60 seconds, machine format output
       wsrec -g -p 60  # print every 60 seconds, wind degrees, machine format

 FIELDS:
   #01 timestamp  : seconds since Epoch, time
   #02 IRh        : indoor humidity, number
   #03 ORh        : outdoor humidity,, number
   #04 ITa        : indoor air temperature Celsius, number
   #05 OTa        : outdoor air temperature Celsius, number
   #06 OTd        : outdoor dew point air temperature Celsius , number
   #07 OTwc       : outdoor wind chill temperature, Celsius, number
   #08 Wind       : wind speed m/s, rate
   #09 Wgust      : wind gust m/s, rate
   #10 Wdir       : wind direction, number or string
   #11 R1h        : rain 1 hours, number
   #12 R24h       : rain 24 hours, number
   #13 TR         : total rain, number
   #14 Pa         : absolute air pressure, number

 NOTES: Retrieves and logs the weather stats from the following weather
        stations: WH-1080/1081

END
  exit 0;
}

##
## revision - print revision and exit
##
sub revision {
       print STDERR <<END;
wsrec: 1.1.7, 2017-09-09 1302
END
       exit 1;
}
