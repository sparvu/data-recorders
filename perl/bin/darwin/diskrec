#!/opt/kronometrix/perl/bin/perl

#  Copyright (c) 2021 Stefan Parvu (www.kronometrix.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use POSIX qw(pause);

# Debug Only
# use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('lhV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $loop     = 0;                   # current loop number
$main::opt_h = 0;                   # help option
$main::opt_V = 0;                   # revision option
$main::opt_l = 0;                   # logging option
my $tp       = 0;                   # time precision
my $kfile    = 'kronometrix.json';  # configuration file
my $rawfile;                        # krd raw data file
my $kdata;                          # configuration data
my $rawkrd;                         # fhandle to krd file
my ($baselog, $curlog, $dlog, $log);
local $| = 1;                       # autoflush


### MAIN BODY

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rawfile = $curlog . '/' . 'diskrec' . '.krd';
    $dlog = $baselog . "/diskrec.log";
    $log = open_file($dlog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

while (1) {

    # get new devstats

    my $ts = sprintf("%.2f", $interval / 3);

    if ($logging) {
        $rawkrd = open_file($rawfile);
    }
 
    get_diskstat($ts);

    if ($logging) {
        close ($rawkrd);
    }

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;

}


### SUBROUTINES

# open JSON configuration file
#
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}



sub get_diskstat {
    
    my ($t) = @_;

    my $iostat = "/usr/sbin/iostat";
    my $pt     = time;

    my ($iops, $rwk) = (0, 0);
    my ($size, $free, $usedpct) = ('NA', 'NA', 'NA');

    open my $fh, "-|", "$iostat", "-x", "$t", "2"
      or die "cannot execute '$iostat' - $!";

    my @ds = <$fh>;
    
    close $fh;

    foreach ( @ds ) {

        # filter out
        next if /extended/ ... /extended/;
        next if /^device|pass|cd/;

        my ($name,$xr,$xw,$xbr,$xbw,$q,$s,$b) = split /\s+/, $_;

        # throughput
        $iops = $xr  + $xw;
        $rwk  = $xbr + $xbw;

        if ($logging) {
            printf $rawkrd 
               "%.${tp}f:%s:%d:%.2f:%d:%.2f:%.2f:%.2f:%.2f:%d:%.2f:%s:%s:%s\n",
               $pt, $name, $xr, $xbr, $xw, $xbw, $q, $s, $b, 
               $iops, $rwk, $size, $free, $usedpct;
        } else {
            printf 
               "%.${tp}f:%s:%d:%.2f:%d:%.2f:%.2f:%.2f:%.2f:%d:%.2f:%s:%s:%s\n",
               $pt, $name, $xr, $xbr, $xw, $xbw, $q, $s, $b, 
               $iops, $rwk, $size, $free, $usedpct;
        }
    }    
}


# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: diskrec [-hV] | [interval [count]]
 e.g. diskrec 5       print continuously, every 5 seconds
      diskrec 1 5     print 5 times, every 1 second

 FIELDS:
  #01 timestamp  : seconds since Epoch, time
  #02 diskid     : disk name

  # reads
  #03 reads      : read requests per second, rate
  #04 rkbytes    : read KB per seconds, rate 

  # writes
  #05 writes     : write requests per second, rate
  #06 wkbytes    : write KB per seconds, rate 
 
  # queue length, throughput
  #08 queue      : the number of not yet completed transactions, rate
  #07 service    : service time per transaction in miliseconds, number
  #09 diskutil   : the percentage of time the device had one or more 
                   transactions outstanding, number
  #10 iops       : disk reads+write requests per second, rate
  #11 rwkbytes   : read+write KB per second, rate

  # inventory
  #12 size       : volume size in GB, partition
  #13 free       : volume free in GB
  #14 usedpct    : volume free percentage

END
    exit 0;
}


## revision - print revision and exit
sub revision {
    print STDERR <<END;
diskrec: 1.1.3, 2016-12-13 0004
END
    exit 0;
}
