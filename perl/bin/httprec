#!/opt/kronometrix/perl/bin/perl

# Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use File::Temp qw(tempfile);
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use POSIX qw(pause);
use Tie::IxHash;
use HTTP::Tiny;
#use Data::Dumper qw(Dumper);

###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hlvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [interval [count]],
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

###  Variables
my $cdata;                           # configuration data
my $rawfile;                         # krd raw data file
my $kdata;                           # configuration data
my $loop     = 0;                    # current loop number
$main::opt_h = 0;                    # help option
$main::opt_V = 0;                    # revision option
my $cfile    = 'httprec.json';       # configuration file
my $tcpka    = 0;                    # transport TCP keepalive settings
my $tp       = 0;                    # time precision
my $kfile    = 'kronometrix.json';   # configuration file
my ($baselog, $curlog, $wlog, $log); # logs
local $| = 1;


### MAIN BODY #

# Set a timer
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .1, .1 );

### 0.1sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

# osname
my $osname = "$^O";
my $agent = "kdr/1.3.4 httprec $osname";

# read configuration
$cdata = open_config($cfile);

# workloads
tie my %work, "Tie::IxHash";
%work = get_httpsvc($cdata);

# http init section
# cookie, agent name

my $rawkrd;
# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $wlog = $baselog . "/httprec.log";
    $log = open_file($wlog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

# get it as verbose
if($verbose) {

    my ($okssl, $whyssl) = HTTP::Tiny->can_ssl;

    if ($logging) {

          if ($okssl) { write_log ("SSL check: ok"); }              
        else { write_log ("SSL check: no, $whyssl"); }

        # write_log ("Total HTTP server instances: " . keys(%work));
        for my $key (keys %work) {
            my $value = $work{$key};
            write_log ("$key => $value");
        }
    } else {

          if ($okssl) { print "SSL check: ok\n" } 
        else { print "SSL check: no, $whyssl\n"; }

        # print "Total HTTP server instances: " . keys(%work) . ".\n";
        for my $key (keys %work) {
            my $value = $work{$key};
            print "$key => $value\n";
        }
    }
}

# init HTTP transport
my $http = HTTP::Tiny->new( keep_alive => $tcpka, 
                            agent => "User-Agent: $agent");

# main loop
while (1) {

    for my $key (keys %work) {

        my $value = $work{$key};
        # configuration
        #
        #  "id" : 1,
        #  "name" : "apache",
        #  "host" : "localhost",
        #  "port" : 80,
        #  "message" : [
        #    {
        #      "name": "a2stat",
        #      "scheme" : "http",
        #      "method" : "GET",
        #      "path" : "/server-status",
        #      "description": "apache2 statistics",
        #      "data": [ ]
        #    }
        #
        # Example
        # a2test:1:apache:a2stat => http:GET:localhost:80:/server-status
        #
        my ($cname, $iid, $iname, $imsg) = split( /:/, $key );
        my ($ischeme, $imethod, $ihost, $iport, $ipath, $trace) = split( /:/, $value );
        my $url = $ischeme . "://" . $ihost . ":" . $iport . $ipath;

        my $tname;

        if ($cname) { 
            if ($iname) { 
                $tname= $cname . '.' . $iname . '.' . $iid;
            } else {
                $tname= $cname . '.' . $iid;
            }
        } else { 
            $tname= $imsg . '.' . $iid;
        }

        if ( $verbose ) {
            if ($logging) {
                write_log("processing URL: $url...");
            } else { 
                print "processing URL: $url... ";
            }
        }

        my $response = $http->request($imethod, $url);
        my $status = $response->{status};

        if ($response->{success} ) {
            if ( $verbose ) {
                if ($logging) {
                    write_log("success");
                } else {
                    print "success\n";
                }
            }

        } else {
            if ( $verbose == 1 ) {
                if ($logging) {
                    write_log("failed");
                } else {
                    print "failed\n";
                }
            }
        }

        #my @srverrs = (500, 501, 502, 503, 504, 505, 529, 599);
        #my @cerrs = (400, 401, 403, 404, 405, 406, 408, 410, 415, 419, 429);
        #my $status = 529;

        if ( $imsg eq 'a2stat' ) { 
            a2stat ($tname, $response->{content}, $status); 
            a2inv  ($tname, $response->{content}, $iport);
            if ($trace eq 'on') { a2trace($tname, $response->{content}); }
        }

    }

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;
}



### Subroutines

## configuration file

# open JSON configuration file
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}

# write config file
sub write_config {

    my ( $conf, $perl_data ) = @_;

    # JSON Object
    my $json_data = JSON->new->utf8->pretty->encode($perl_data);

    # we will parse now the file
    if ( defined $ENV{'KRMX_PREFIX'} ) {
        if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
            open my $fh, ">", "$ENV{'KRMX_PREFIX'}/etc/$conf.tmp";

            # print $fh encode_json($data);
            print $fh $json_data;
            close $fh;
            move(
                "$ENV{'KRMX_PREFIX'}/etc/$conf.tmp",
                "$ENV{'KRMX_PREFIX'}/etc/$conf"
            ) or die "Error: cannot update $conf: $!";

        }
        else {
            print "error: write_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
            usage();
        }
    }
    else {
        if ( -e "/opt/kronometrix/etc/$conf" ) {
            open my $fh, ">", "/opt/kronometrix/etc/$conf.tmp";
            print $fh $json_data;
            close $fh;
            move( "/opt/kronometrix/etc/$conf.tmp", "/opt/kronometrix/etc/$conf" )
              or die "Error: cannot update $conf: $!";
        }
        else {
            print "error: write_config - $! /opt/kronometrix/etc/$conf \n";
            usage();
        }
    }
}

# reload configuration
sub reload_config {

    write_log("info: main - signal HUP received, reload armed...");

    $cdata = open_config($cfile);

    ## hostid
    get_hostid($cdata);

    ## get HTTP server defintion
    %work = get_httpsvc($cdata);

    return;
}


# get workloads defintion
sub get_httpsvc {

    my ($data) = @_;
    tie my %httpsvc, "Tie::IxHash";

    my @temp = @{ $data->{'http'} };

    foreach my $f (@temp) {
        my ($sid, $tid, $dsid);

        my $name   = $f->{'name'};
        my $desc   = $f->{'description'};

        my @inss  = @{ $f->{'instance'} };

        foreach my $inst (@inss) {
            my $iid   = $inst -> {'id'};
            my $iname = $inst -> {'name'};
            my $ihost = $inst -> {'host'};
            my $iport = $inst -> {'port'};

            my @msg  = @{ $inst->{'message'} };
            my $trace = 'NA';
 
            foreach my $mesg (@msg) {

                my $imname = $mesg -> {'name'};
                my $ims    = $mesg -> {'scheme'};
                my $imm    = $mesg -> {'method'};
                my $imp    = $mesg -> {'path'};
                $trace  = $mesg -> {'trace'} if ($mesg -> {'trace'});

                if ( $trace ne 'on' ) { $trace = 'NA'; }

                # print "$name:$iid:$iname:$imname => $ims:$imm:$ihost:$iport:$imp\n";
                my $keyapp = $name . ":" . $iid . ":" . $iname . ":" . $imname;
                my $hvalue = $ims . ":" . $imm . ":" . $ihost . ":" . $iport . ":" . $imp . ":" . $trace;
                $httpsvc{$keyapp} = $hvalue;
            }
        }
    }

    return %httpsvc;
}

sub a2stat {

    my ($name, $body, $status) = @_;

    my $reqsec        = 'NA';
    my $kbytesec      = 'NA';
    my $kbytereq      = 'NA';
    my $busyworker    = 'NA';
    my $idleworker    = 'NA';
    my $traffic       = 'NA';
    my $cpupct        = 'NA';
    my $uptime        = 'NA';
    my $reqs_unit     = 'NA';
    my $kbyte_unit    = 'NA';
    my $kbytereq_unit = 'NA';

    $body=~ m/<dt>([^\s]+) requests\/sec - ([^\s]+) (k*B)\/second - ([^\s]+) ([k,M]*B)\/request<\/dt>/;

    $reqsec = $1         if (defined $1);
    $kbyte_unit = $3     if (defined $3);
    $kbytereq_unit = $5  if (defined $5);
    $kbytesec = $2       if (defined $2);
    $kbytereq = $4       if (defined $4);

    # requests per second
    if ($reqsec =~ /^\./ ) { $reqsec .= '0'; }

    # kbytesec (KBytes per second)
    if ( $kbyte_unit =~ /^B/ ) {
        $kbytesec = sprintf("%.2f", $kbytesec /= 1024);
    }

    # kbytereq (KBytes per request)
    if ( $kbytereq_unit =~ /^B/ ) {
        $kbytereq = sprintf ("%.2f",$kbytereq /= 1024);
    } elsif ( $kbytereq_unit =~ /^M/ ) {
        $kbytereq = sprintf ("%.2f",$kbytereq *= 1024);
    }

    # busy and idle workers
    $body=~ m/<dt>([^\s]+) requests currently being processed, ([^\s]+) idle workers<\/dt>/;
    $busyworker = $1 if (defined $1);
    $idleworker = $2 if (defined $2);

    # cpu usage
    $body=~ m/<dt>CPU Usage: u([^\s]+) s([^\s]+) cu.* cs.* - ([^\s]+%) CPU load<\/dt>/;
    $cpupct=$3 if (defined $3);
    $cpupct =~ s/\%//;
    if ($cpupct =~ /^\./ ) {
        $cpupct = sprintf ("%.2f", $cpupct .= '0');
    }

    # traffic
    $body=~ m/Total Traffic: ([^<]+)<\/dt>/;
    $traffic = $1 if (defined $1);

    # uptime
    $uptime = 'NA';
    $body=~ m/Server uptime: ([^<]+)<\/dt>/;
    $uptime=$1 if (defined $1);
    $uptime =~ s/^\s+//;

    # message raw data file
    $rawfile = 'a2statrec';

    if ($logging) {
        # set krd raw file
        $rawfile = $curlog . "/" . $rawfile . ".krd";

        write_log ("rawfile=$rawfile") if ($verbose);

        my $rawkrd = open_file($rawfile);

        printf $rawkrd "%.${tp}f:%s:%s:%s:%s:%s:%s:%s:%s:%s:%s\n", 
               time, $name, 
               $reqsec, $kbytesec, $kbytereq,
               $busyworker,$idleworker,
               $traffic, $cpupct, $uptime, $status;

        close ($rawkrd);

    } else {

        printf "%.${tp}f:%s:%s:%s:%s:%s:%s:%s:%s:%s:%s\n",
               time, $name,
               $reqsec, $kbytesec, $kbytereq,           
               $busyworker,$idleworker,                 
               $traffic, $cpupct, $uptime, $status;

    }

    return;
}


sub a2inv {

    my ($name, $body, $port) = @_;

    my $http_name     = 'NA';
    my $http_built    = 'NA';
    my $http_type     = 'NA';

    my $msg = 'a2inv';

    # fetch metrics
 
    # http name
    $body=~ m/Server Version: ([^<]+)<\/dt>/;
    if (defined $1) {
        $1 =~ m/^(.*\)).*$/;;
        $http_name = $1;
    }

    # built
    $body=~ m/Server Built: ([^<]+)<\/dt>/;
    $http_built = $1 if (defined $1);
    $http_built =~ s/\://g;
    chomp($http_built);

    # type
    $body=~ m/Server MPM: ([^<]+)<\/dt>/;
    $http_type = $1 if (defined $1);

    # message raw data file
    $rawfile = $msg . 'rec';

    if ($logging) {
        # set krd raw file
        $rawfile = $curlog . "/" . $rawfile . ".krd";

        write_log ("rawfile=$rawfile") if ($verbose);

        my $rawkrd = open_file($rawfile);

        printf $rawkrd "%.${tp}f:%s:%s:%d:%s:%s\n",
               time, $name, $http_name, $port, $http_built, $http_type;

        close ($rawkrd);

    } else {

        printf "%.${tp}f:%s:%s:%d:%s:%s\n",
               time, $name, $http_name, $port, $http_built, $http_type;
    }

    return;
}

# Apache2 Trace - Extracts the execute  
#
sub a2trace {

    my ($name, $body) = @_;

    my $msg = 'a2bus';
    my @busy = '';

    # fetch metrics

    if ($body) {

        my $headers =['Srv','PID','Acc','M','CPU','SS','Req','Conn','Child','Slot','Client','VHost','Request'];

        use HTML::TableExtract;
        my $te = HTML::TableExtract->new( headers => $headers );

        $te->parse($body);

        # Examine all matching tables
        foreach my $ts ($te->tables) {
            foreach my $row ($ts->rows) {
                my @r = @$row;
                my $line;
                foreach my $column (0..12) {
                    if (defined $r[$column]) {
                        chomp $r[$column];
                        $r[$column] = 'localhost' if ($r[$column] =~ m/::1/);
                        $r[$column] =~ s/:/ /g;
                        $line .= $r[$column] . "|";
                    }
                }
                $line .= '<br>';
                push @busy, $line;
            }
        }
    }

    # message raw data file
    $rawfile = $msg . 'rec';

    if ($logging) {
        # set krd raw file
        $rawfile = $curlog . "/" . $rawfile . ".krd";

        write_log ("rawfile=$rawfile") if ($verbose);

        my $rawkrd = open_file($rawfile);

        my $format = "%s:";
        $format .= "%s" x @busy;
        $format .= "\n";

        printf $rawkrd $format, $name, @busy;

        #printf $rawkrd "%.${tp}f:%s:%s\n", time, $name, "@busy";

        close $rawkrd;

    } else {

        my $format = "%s:";
        $format .= "%s" x @busy;
        $format .= "\n";

        printf $format, $name, @busy;

        #printf "%.${tp}f:%s:%s\n", time, $name, "@busy";
    }

    return;
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: httprec [-hlvV] | [interval]
OPTIONS:
  -h        : help information
  -l        : log raw data to krd file, no STDOUT
  -v        : verbose information
  -V        : release version
  interval  : maximum number of seconds between samples

 FIELDS:

 A2STAT MESSAGE (APACHE)
  #01 timestamp  : seconds since Epoch, time
  #02 name       : HTTP server instance id name, string
  #03 reqsec     : requests per second, number
  #04 kbytesec   : KB per second, number
  #05 kbytereq   : KB per request, number
  #06 busyworker : busy workers, number
  #07 idleworker : idle workers, number
  #08 traffic    : total traffic (KB|MB|GB), number
  #09 cpupct     : CPU utilization, number
  #10 uptime     : uptime, number
  #11 status     : status code, number

 A2INVENTORY MESSAGE (APACHE)
  #01 timestamp  : seconds since Epoch, time
  #02 name       : HTTP server instance id, string
  #03 id         : HTTP server name, string
  #04 port       : HTTP port number, number
  #04 built      : built information, string
  #05 type       : type of the A2 instance, string

 A2TRACE MESSAGE (APACHE)
  #01 name       : HTTP server instance id, string
  #02 buffer     : all HTTP execute requests, string

END
    exit 0;
}

# revision - print revision and exit
sub revision {
    print STDERR <<END;
httprec: 1.1.4, 2017-09-01 1235
END
    exit 0;
}
