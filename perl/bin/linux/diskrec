#!/opt/kronometrix/perl/bin/perl

#  Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
#  Initial Author: Stefan Parvu
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use Sys::Filesystem ();
use Filesys::Df;
use File::stat;
use File::Stat::Bits;
use Linux::Info;
use POSIX qw(pause ceil);
use List::Util qw(all);

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('d:hlvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# set debug log
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}


###  Variables
my $sb        = "/sys/block";
my $ds        = "/proc/diskstats";
my $loop      = 0;                  # current loop number
$main::opt_h  = 0;                  # help option
$main::opt_V  = 0;                  # revision option
$main::opt_l  = 0;                  # logging option
my $disk_sem  = 0;                  # disk mode
my @def_disks = ();                 # default disks
my $tp        = 0;                  # time precision
my $kfile     = 'kronometrix.json'; # configuration file
my $rawfile;                        # krd raw data file
my $kdata;                          # configuration data
my ($baselog, $curlog, $dlog, $log);
local $| = 1;



### MAIN BODY

# Set a timer for L::I object
$SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .1, .1 );
my $lxs = Linux::Info->new(
    diskstats => 1
);

### 0.1sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

#
# check for disk list
if ( defined $main::opt_d ) {
    $disk_sem = 1;
    @def_disks = split( /,/, $main::opt_d );
}

if ( $interval =~ /\./ ) {
    $tp = 3;
}

# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rawfile = $curlog . '/' . 'diskrec' . '.krd';
    $dlog = $baselog . "/diskrec.log";
    $log = open_file($dlog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

while ( 1 ) {

    my $stat    = $lxs->get;

    # get FS
    my @fs = get_fs();

    my %sp = procswap();
    #for my $key (keys %sp) {
    #    print $sp{$key};
    #}

    # get the diskid
    my @rdisks = sort $stat->diskstats;

    #my $dmajor = 0;
    #my $dminor = 0;
    my %dstat;

    my $rawkrd;
    if ($logging) {
        $rawkrd = open_file($rawfile);
    }

    ### loop over all disks
    foreach my $d (@rdisks) {
        my ( $readReq, $readByt, $writeReq, $writeByt, $totReq, $totByt );
        my ( $dmajor, $dminor );

        my $lsize = 'NA';
        my $lfree = 'NA';
        my $lused = 'NA';

        # filter by disk
        if ( $disk_sem == 1 ) {
            next if ( all { $_ ne $d } @def_disks);
        }

        #exceptions
        next if ($d =~ m/^loop|^ram|^zram/);
        next if ($d =~ m/^fd0|^hdc/);
        next if ($d =~ m/^sr(?:[0-9])$/);

        next if ( exists $sp{$d} );

        #print "Disk: $d\n";

        my $print_time = time();

        ### Get Stats
        my $disk    = $stat->diskstats;

        ### verbose
        if ($verbose) {
            if ($logging) {
                print $log "time: $print_time, disk: $d \n";
            } else {
                print "time: $print_time, disk: $d \n";
            }
        }


        if ( defined( $disk->{$d}{major} ) ) {
            $dmajor = $disk->{$d}{major};
        }

        if ( defined( $disk->{$d}{minor} ) ) {
            $dminor = $disk->{$d}{minor};
        }

        if ( defined( $disk->{$d}{rdreq} ) ) {
            $readReq = $disk->{$d}{rdreq};
        }

        if ( defined( $disk->{$d}{wrtreq} ) ) {
            $writeReq = $disk->{$d}{wrtreq};
        }

        if ( defined( $disk->{$d}{ttreq} ) ) {
            $totReq = $disk->{$d}{ttreq};
        }

        if ( defined( $disk->{$d}{rdbyt} ) ) {
            $readByt = ( $disk->{$d}{rdbyt} / 1024 );
        }

        if ( defined( $disk->{$d}{wrtbyt} ) ) {
            $writeByt = ( $disk->{$d}{wrtbyt} / 1024 );
        }

        if ( defined( $disk->{$d}{ttbyt} ) ) {
            $totByt = ( $disk->{$d}{ttbyt} / 1024 );
        }

        my $key= $dmajor . $dminor;

        for my $filesystem ( @fs ) {

            my ($mj, $mi);

            my $st = stat($filesystem) or next;

            if (S_ISDIR($st->mode)) {
                ($mj, $mi) = dev_split( $st->dev );
            }

            my $fkey = $mj . $mi;

            if ( $key eq $fkey ) {

                my $ref = df("$filesystem", 1);

                if ( defined($ref) ) {
                    #my $used = $ref->{used} / 1073741824;

                    $lsize  = sprintf("%.2f", $ref->{blocks} / 1073741824);

                    #my $avail = ceil($ref->{bavail} / 1073741824);
                    #print "Avail: $avail \n";

                    $lfree = sprintf("%.2f", $ref->{bfree} / 1073741824);

                    $lused = ceil(100 - (100 * ($lfree / $lsize)));
                }

                my $mntfs;
                if ( $filesystem =~ /^\/$/ ) {
                    $mntfs  = "root";

                } elsif ( $filesystem =~ m/^.*\/(.*?)$/ ) {
                    $mntfs  = $1;

                }

                # rbpi4
                if ($d =~ m/^mmcblk0/) {
                    
                    if ($d =~ m/^(mmcblk0.*?)\s+.*$/) {
                        $d = $1;
                    }
                }

                last if ($mntfs =~ /tmp/);

                $d .= $mntfs;
            }
        }

        # remove '-'
        $d =~ s/\-//;


        # cleanup rbpi4 storage devices
        if ($d =~ m/^(mmcblk0)\s+.*$/) {
            $d = $1;
        }

        ### verbose
        if ($verbose) {
            if ($logging) {
                print $log "  requests: $totReq ( reads: $readReq writes: $writeReq) \n";
                print $log "  bytes:  $totByt ( reads: $readByt writes: $writeByt) \n";
            } else {
                print "  requests: $totReq ( reads: $readReq writes: $writeReq) \n";
                print "  bytes:  $totByt ( reads: $readByt writes: $writeByt) \n";
            }
        }

        if ($logging) {
            printf $rawkrd "%.${tp}f:%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%s:%s:%s\n",
                $print_time, $d, $readReq, $readByt, $writeReq, $writeByt, 
                $totReq, $totByt, $lsize, $lfree, $lused;
        } else {
            printf "%.${tp}f:%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%s:%s:%s\n",
                $print_time, $d, $readReq, $readByt, $writeReq, $writeByt, 
                $totReq, $totByt, $lsize, $lfree, $lused;
        }

    }

    if ($logging) {
        close ($rawkrd);
    }

    $lxs->init;

    ### Check for end
    last if ++$loop == $loop_max;


    ### Interval
    pause;

}

### SUBROUTINES


# open JSON configuration file
#
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


# get filesystems
#  will get a list of valid regular fs ignoring
#  autofs, nfs,usbfs, rpc_pipefs, selinuxfs
#
sub get_fs {

    my $fs = Sys::Filesystem->new();
    my @filesystems = $fs->regular_filesystems();
    my @lfs;

    for (@filesystems)
    {

        if ( ($fs->format($_) eq 'autofs') or
             ($fs->format($_) eq 'nfs') or
             ($fs->format($_) eq 'udf,iso9660') or
             ($fs->format($_) eq 'usbfs') or
             ($fs->format($_) eq 'rpc_pipefs') or
             ($fs->format($_) eq 'devtmpfs') or
             ($fs->format($_) eq 'fuse.gvfsd-fuse') or
             ($fs->format($_) eq 'xenfs') or
             ($fs->format($_) eq 'fuse.lxcfs') or
             ($fs->format($_) eq 'cgroup') or
             ($fs->format($_) eq 'hugetlbfs') or
             ($fs->format($_) eq 'mqueue') or
             ($fs->format($_) eq 'tracefs') or
             ($fs->format($_) eq 'pstore') or
             ($fs->format($_) eq 'selinuxfs') or
             ($fs->mount_point($_) =~ /media\/floppy/ ) or
             ($fs->mount_point($_) =~ /dev\/\.static/ ) or
             ($fs->mount_point($_) =~ /virtfs/ ) or
             ($fs->mount_point($_) =~ /cagefs-skeleton/ ) ) {
            next;
        }

        if ($verbose) {
            if ($logging) {
                printf $log "%s is a %s filesystem mounted on %s\n",
                   $fs->mount_point($_),
                   $fs->format($_),
                   $fs->device($_);
            } else {
                printf "%s is a %s filesystem mounted on %s\n",
                   $fs->mount_point($_),
                   $fs->format($_),
                   $fs->device($_);
            }
        }

        # load final
        push @lfs, $_;
    }

    return @lfs;
}


# process proc swaps file
#
sub procswap {

    my %swaps;

    if (-e "/proc/swaps") {
        open my $pswap, "<", "/proc/swaps"
          or die "error: cannot open /proc/swaps: $!\n";
        while (<$pswap>) {
            chomp;
            next if $_ =~ m/^Filename/;
            if ( $_ =~ m/^.*\/(.*?)\s.*$/ ) {
                my $k = $1;
                $swaps{$k} = $k;
            }
            #if ( grep{/^$d$/} <$pswap>) { next; }
        }
        close $pswap;
    }

    return %swaps;
}


# usage - print usage and exit.
#
sub usage {

    print STDERR <<END;
USAGE: diskrec [-hlvV] [-d disk[,disk...]] | [interval [count]]
OPTIONS:
  -h          : help information
  -l          : log raw data to krd file, no STDOUT
  -v          : verbose mode
  -V          : release version
  -d disk,... : monitor a list of disks only

 e.g. diskrec 60           print every 60secs all found disks
      diskrec -d sda1 120  print every 120sec sda1 disk only
      diskrec -l 60        print continuously, every 60 seconds to raw datafile

 FIELDS:
  #01 timestamp  : seconds since Epoch, time
  #02 diskid     : disk name, LUN name

  # reads
  #03 reads      : disk reads per second, rate
  #04 rkbytes    : read KB per second, rate

  # writes
  #05 writes     : disk writes per second, rate
  #06 wkbytes    : write KB per second, rate

  # throughput
  #07 iops       : disk read+write requests per second, rate
  #08 rwkbytes   : read+write KB per second, rate

  # inventory
  #09 size       : volume, mountpoint size in GB
  #10 free       : volume, mountpoint free in GB
  #11 usedpct    : volume, mountpoint used in percentage

END
    exit 0;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
diskrec: 1.2.3, 2022-05-02 1452
END
    exit 0;
}
