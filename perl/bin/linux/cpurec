#!/opt/kronometrix/perl/bin/perl

#  Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
#  Initial Author: Stefan Parvu
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use Linux::Info;
use POSIX qw(pause);

# Debug Only
# use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('lhV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $HZ;
my $loop     = 0;                    # current loop number
$main::opt_h = 0;                    # help option
$main::opt_l = 0;                    # logging option
$main::opt_V = 0;                    # revision option
my $tp       = 0;                    # time precision
my $kfile    = 'kronometrix.json';   # configuration file
my $update;                          # used for deltas
my $rawfile;                         # krd raw data file
my %cpudataOld;                      # cpu_stats data
my $kdata;                           # configuration data
my ($baselog, $curlog, $clog, $log); # log files
local $| = 1;                        # autoflush



### MAIN BODY

# Set a timer for L::I object
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .1, .1 );
my $lxs = Linux::Info->new( cpustats => 1 );
### 0.1sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

my @order = qw(user nice system irq softirq iowait steal idle total);

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}


# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rawfile = $curlog . '/' . 'cpurec' . '.krd';
    $clog = $baselog . "/cpurec.log";
    $log = open_file($clog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

while (1) {

    ### Get Stats
    my $stat = $lxs->get;

    # Dump $lx variable
    # use Data::Dumper;
    # print Dumper($stat);

    my $cpu = $stat->cpustats;

    # get the cpu-ids
    my @cpus = sort $stat->cpustats;

    my $rawkrd;
    if ($logging) {
        $rawkrd = open_file($rawfile);
    }
    # loop over all cpus
    foreach (@cpus) {
        next if ( $_ eq "cpu" );
        if ($logging) {
            printf $rawkrd "%.${tp}f:%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f\n",
              time, $_, @{ $cpu->{$_} }{@order};
        } else { 
            printf "%.${tp}f:%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f\n",
              time, $_, @{ $cpu->{$_} }{@order};
        }
    }

    if ($logging) {
        close ($rawkrd);
    }

    $lxs->init;

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;

}


### SUBROUTINES


# open JSON configuration file
#
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: cpurec [-hlV] | [interval [count]]
 e.g. cpurec 5       print continuously, every 5 seconds
      cpurec 1 5     print 5 times, every 1 second
      cpurec -l 60   print continuously, every 60 seconds to raw datafile

 FIELDS:
  #01 timestamp  : seconds since Epoch, time
  #02 cpuid      : cpuid, number
  #03 userpct    : cpu utilization, user space, number
  #04 nicepct    : cpu utilization, user space nice priority, number
  #05 syspct     : cpu utilization, system space, number
  #06 irqpct     : cpu percentage servicing interrupts, number
  #07 softirqpct : cpu percentage servicing softirqs, number
  #08 iowaitpct  : cpu percentage in idle state because an I/O operation 
                   is waiting to complete, number
  #09 stealpct   : cpu percentage of time spent in other operating systems 
                   when running in a virtualized environment, number
  #10 idlepct    : cpu utilization, idle state, number
  #11 totalpct   : total cpu utilization, number

END
    exit 0;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
cpurec: 1.1.5, 2017-07-31 1610
END
    exit 0;
}
