#!/opt/kronometrix/perl/bin/perl

#  Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
#  Initial Author: Stefan Parvu
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use Linux::Info;
use Linux::Info::SysInfo;
use POSIX qw(pause ceil);
use IO::Interface::Simple;
use Sys::Filesystem ();
use Filesys::Df;
use File::stat;
use File::Stat::Bits;
use Linux::Distribution qw(distribution_name distribution_version);

# Debug Only
#use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hlvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# set debug log
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

###  Variables
my $sb        = "/sys/block";           # sysblock
$main::opt_h  = 0;                      # help option
$main::opt_l  = 0;                      # logging option
$main::opt_V  = 0;                      # revision option
my $loop      = 0;                      # current loop number
my $tp        = 0;                      # time precision
my $lsb       = "/usr/bin/lsb_release"; # LSB utility
my $kfile     = 'kronometrix.json';     # configuration file
my $rawfile;                            # krd raw data file
my $kdata;                              # configuration data
my ($baselog, $curlog, $hlog, $log);    # logs
local $| = 1;



### MAIN BODY

# Set a timer for S::S::L object
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .1, .1 );
my $dlxs   = Linux::Info->new ( diskstats  => 1 );
my $ds     = Linux::Distribution->new;
### 0.1sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

if ( $interval =~ /\./ ) {
    $tp = 3;
}

# speedup option, default 1hr
my $boot    = 60;             # we speedup 60 times 60sec
my $speedup = 1;              # default on
my $defint  = $interval;      # we save the original interval

# logging option
if ($logging) {

    if ( $speedup == 1 ) { rstimer($boot); }

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rawfile = $curlog . '/' . 'hdwrec' . '.krd';
    $hlog = $baselog . "/hdwrec.log";
    $log = open_file($hlog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

while (1) {

    # get stats
    my $stat = $dlxs->get;

    my $rawkrd;
    if ($logging) {
        $rawkrd = open_file($rawfile);
    }

    my $nlxs  = Linux::Info::SysInfo->new;
    # hostname
    my $host = $nlxs->get_hostname;
    $host =~ s/\..*$// if $host =~ /\./;

    # hypervisor type
    my $hypervisor = get_hypervisor();

    my $arch = $nlxs->get_arch;
    my $rels = $nlxs->get_release;

    # CPU Information
    my $pcpucount = $nlxs->get_pcpucount;
    my $tcpucount = $nlxs->get_tcpucount;
    my $ncores    = $tcpucount;

    # CPU model
    my $model     = $nlxs->get_model;
    if ($model) { 

        $model =~ s/(\s+)/ /g;

    } else {

        # we go for firmware
        if (-e "/sys/firmware/devicetree/base/model") {

            open my $hdwmodel, "<", "/sys/firmware/devicetree/base/model"
                 or die "error: cannot find /proc/cpuinfo: $!\n";

            while (<$hdwmodel>) {
                chomp;
                $model = $_;
            }

            close $hdwmodel;

        } else { $model = "NA"; } 
    }
 
    # hyper-threading
    my $ht = 'NA';

    #uptime
    my $uptime = $nlxs->get_uptime;
    
    # disks might become available, check disks every sample
    my $num_disk = 0;
    my $lsize = 0;

    # get disks
    my $rdisks = get_disks();
    $num_disk =  scalar(@$rdisks);


    # get GB total storage
    my @fs = get_fs();
    my %sp = procswap();
    my @rdisks = sort $stat->diskstats;
    my ( $dmajor, $dminor ) = 0;
    my %dstat;

    ### loop over all disks
    foreach my $d (@rdisks) {
        my ( $readReq, $readByt, $writeReq, $writeByt, $totReq, $totByt );
        my ( $dmajor, $dminor );

        #exceptions
        next if ($d =~ m/^loop|^ram|^zram/);
        next if ($d =~ m/^fd0|^hdc/);
        next if ($d =~ m/^md(?:[0-9])/);
        next if ($d =~ m/^sr(?:[0-9])$/);

        next if ( exists $sp{$d} );

        ### Get Stats
        my $disk    = $stat->diskstats;

        if ( defined( $disk->{$d}{major} ) ) {
            $dmajor = $disk->{$d}{major};
        }

        if ( defined( $disk->{$d}{minor} ) ) {
            $dminor = $disk->{$d}{minor};
        }

        my $key= $dmajor . $dminor;

        for my $filesystem ( @fs ) {

            my ($mj, $mi);

            my $st = stat($filesystem) or next;

            if (S_ISDIR($st->mode)) {
                ($mj, $mi) = dev_split( $st->dev );
            }

            my $fkey = $mj . $mi;

            if ( $key eq $fkey ) {

                my $ref = df("$filesystem", 1);

                if ( defined($ref) ) {
                    $lsize  += $ref->{blocks} / 1073741824;
                }
            }
        }
    }

    # roundup for best match of storage
    $lsize = ceil($lsize);

    # fetch dist_id, os, relos 
    my ($os, $relos) = "NA";

    # get os, relos
    if(my $distro = $ds->distribution_name()) {
        $os = lc $distro;

        if (defined($ds->distribution_version()) && 
           ($ds->distribution_version()) ne "" ) {
            $relos = $ds->distribution_version();
        } else {
            $relos = "NA";
            if ($distro eq "redhat") {
                my $distid;
                ($os, $relos, $distid) = get_lsb("$lsb");
                if (defined $os) {
                    $os = "cloudlinux" if ( $os eq "CloudLinuxServer" );
                } else {
                    if (-e "/etc/redhat-release") {
                        open my $rhelrel, "<", "/etc/redhat-release"
                          or die "error: cannot find redhat-release: $!\n";
                        while (<$rhelrel>) {
                            chomp;
                            if ($_ =~ /^CloudLinux/o) {
                                $os="cloudlinux";
                                $relos = $1 if $_ =~ /(\d+\.\d+(?:\.\d+)?)/;
                            } else {
                                $os = "NA";
                                $relos = "NA";
                            }
                        }
                        close $rhelrel;
                    } else { $os = "NA"; $relos = "NA"; }
                }
            }
        }
    }  else {

        if (-e $lsb) {
            my $distid;
            ($os, $relos, $distid) = get_lsb("$lsb");
            $os = lc $os;
        } else {
            if (-e "/etc/redhat-release") {
                open my $rhelrel, "<", "/etc/redhat-release"
                    or die "error: cannot find redhat-release: $!\n";
                while (<$rhelrel>) {
                    chomp;
                    if ($_ =~ /^CloudLinux/o) {
                        $os="cloudlinux";
                        $relos = $1 if $_ =~ /(\d+\.\d+(?:\.\d+)?)/;
                    } elsif ($_ =~ /^Foobar/o) {
                        $os="foobar";
                        $relos = $1 if $_ =~ /(\d+\.\d+(?:\.\d+)?)/;
                    } else {
                        $os = "NA";
                        $relos = "NA";
                    }
                }
                close $rhelrel;
            } else { $os = "NA"; $relos = "NA"; }
        }
    }

    # fetch NICS, reset here if NIC is removed/added
    #my $num_nic = 0;
    #foreach my $i (split /, /, $nlxs->get_interfaces ) {
        # print "Interface: $i\n";

        # skip here some interfaces
    #    $num_nic++ if $i !~ /lo/ and $i !~ /vif/;
    #}

    my $memtotal  = $nlxs->get_mem;
    my $swaptotal = $nlxs->get_swap;
    $memtotal =~ s/\s+[kK]B$//;
    $swaptotal =~ s/\s+[kK]B$//;
    $memtotal = sprintf ("%.2f", $memtotal / 1024);
    $swaptotal = sprintf ("%.2f", $swaptotal / 1024);

    # get kdr release version
    my $kdrrel = get_version();

    my @interfaces = IO::Interface::Simple->interfaces;

    my $ifs;

    my $k=0;
    for my $if (@interfaces) {
        next if $if->is_loopback;
        if ( $k > 0 ) {
            $ifs = $ifs . ' ' . $if . '_' . $if->address;
        } else {
            $ifs = $if . '_' . $if->address;
        }
        $k++;
    }

    $ifs =~ s/\://g if $ifs =~ /\:/;

    # NIC count
    my $num_nic = $k;

    if ($logging) {
        # print metrics
        printf $rawkrd "%.${tp}f:%s:%s:%s:%s:%s:%s:%s:%d:%d:%d:%s:%s:%s:%d:%.2f:%d:%s:%s:%s\n",
          time, $host, $arch, $model, $hypervisor, $os, $relos,
          $rels, $pcpucount, $ncores, $tcpucount, $ht,
          $memtotal, $swaptotal, 
          $num_disk, $lsize, $num_nic, $uptime, $ifs, $kdrrel;

    } else {
        # print metrics
        printf "%.${tp}f:%s:%s:%s:%s:%s:%s:%s:%d:%d:%d:%s:%s:%s:%d:%.2f:%d:%s:%s:%s\n",
          time, $host, $arch, $model, $hypervisor, $os, $relos,
          $rels,
          $pcpucount, $ncores, $tcpucount, $ht,
          $memtotal, $swaptotal, 
          $num_disk, $lsize, $num_nic, $uptime, $ifs, $kdrrel;
    }

    if ($logging) {
        close ($rawkrd);
    }

    $dlxs->init;

    ### Check for end
    last if ++$loop == $loop_max;

    ### Check for speedup
    if ( $speedup > 0 ) {
        if ( $speedup == $boot ) {
            rstimer($defint);
            $speedup = -1;
        } else { $speedup++; }
    }

    ### Interval
    pause;
}



### SUBROUTINES


# open JSON configuration file
#
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


sub get_version {

    my $fver = '/opt/kronometrix/VERSION';
    my $rel  = 'NA';

    if (-f $fver) {
        open my $fh, "<", $fver
            or die "error: cannot find VERSION file: $!\n";
        while (<$fh>) {
            chomp;
            $rel = $_;
        }
        close $fh;
    }

    return $rel;
}


sub get_lsb {

    my ($lsbfh) = @_;
    my ($o,$r,$d);

    open my $LSBINFO, "-|", "$lsbfh -a 2>/dev/null"
        or die "error: cannot execute lsb_release - $!";

    while (<$LSBINFO>) {
        chomp;
        $d = $1 if $_ =~ /^Distributor ID\:\s+(.*)/; $r = $1 if $_ =~ /^Release\:\s+(.*)/;
    }
    $o = $d;

    close $LSBINFO;

    return ( $o, $r, $d );
}


sub get_hypervisor {

    my $hvisor         = "NA";
    my $systemd_hvisor = "/usr/bin/systemd-detect-virt";

    if (-e "/sys/hypervisor/type") {
        open my $hv, "<", "/sys/hypervisor/type"
            or die "error: cannot find hypervisor type file: $!\n";
        while (<$hv>) {
                chomp;
                $hvisor = $_;
            }
            close $hv;
    } elsif ( -e $systemd_hvisor ) {

        open my $fh, "-|", "$systemd_hvisor";
        while ( <$fh> ) {
            chomp;
            $hvisor = $_;
        }
        close $fh;

    } else { $hvisor = 'NA'; }

    return $hvisor;
}


sub get_disks {

    my @d;

    # get disks
    opendir(my $dh, $sb)
        or die "Error: Cannot find block directory: $!\n";

    while(readdir $dh) {
        # discard parent dir
        next if ($_ =~ m/^\./);

        # exceptions
        next if ($_ =~ m/^loop|^ram|^zram/);
        next if ($_ =~ m/^fd0|^hdc/);
        next if ($_ =~ m/^md(?:[0-9])/);
        next if ($_ =~ m/^dm-(?:[0-9])/);
        next if ($_ =~ m/^sr(?:[0-9])$/);

        # print disks
        # print "Disk: $_\n";
        push @d, "$_"; 
    }
    closedir $dh;
    
    # return array ref
    return \@d;
}


## get filesystems
#  will get a list of valid regular fs ignoring
#  autofs, nfs,usbfs, rpc_pipefs, selinuxfs
sub get_fs {

    my $fs = Sys::Filesystem->new();
    my @filesystems = $fs->regular_filesystems();
    my @lfs;

    for (@filesystems)
    {

        if ( ($fs->format($_) eq 'autofs') or
             ($fs->format($_) eq 'nfs') or
             ($fs->format($_) eq 'udf,iso9660') or
             ($fs->format($_) eq 'usbfs') or
             ($fs->format($_) eq 'rpc_pipefs') or
             ($fs->format($_) eq 'devtmpfs') or
             ($fs->format($_) eq 'fuse.gvfsd-fuse') or
             ($fs->format($_) eq 'xenfs') or
             ($fs->format($_) eq 'fuse.lxcfs') or
             ($fs->format($_) eq 'cgroup') or
             ($fs->format($_) eq 'hugetlbfs') or
             ($fs->format($_) eq 'mqueue') or
             ($fs->format($_) eq 'tracefs') or
             ($fs->format($_) eq 'pstore') or
             ($fs->format($_) eq 'selinuxfs') or
             ($fs->mount_point($_) =~ /cagefs-skeleton/ ) ) { 
            next;
        }

        if ($verbose) {
            if ($logging) { 
                printf $log "%s is a %s filesystem mounted on %s\n",
                 $fs->mount_point($_),
                 $fs->format($_),
                 $fs->device($_);
            } else {
                printf "%s is a %s filesystem mounted on %s\n",
                 $fs->mount_point($_),
                 $fs->format($_),
                 $fs->device($_);
            }
        }

        # load final
        push @lfs, $_;
    }

    return @lfs;
}


sub procswap {

    my %swaps;

    if (-e "/proc/swaps") {
        open my $pswap, "<", "/proc/swaps"
          or die "error: cannot open /proc/swaps: $!\n";
        while (<$pswap>) {
            chomp;
            next if $_ =~ m/^Filename/;
            if ( $_ =~ m/^.*\/(.*?)\s.*$/ ) {
                my $k = $1;
                $swaps{$k} = $k;
            }
            #if ( grep{/^$d$/} <$pswap>) { next; }
        }
        close $pswap;
    }

    return %swaps;
}


sub rstimer {

    my ($lt) = @_;

    my $fint = $lt;

    setitimer( ITIMER_REAL, $fint, $lt );

    return;
}




# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: hdwrec [-hlV] | [interval [count]]
 e.g. hdwrec 5       print continuously every 5 seconds
      hdwrec 1 5     print 5 times, every 1 second
      hdwrec -l 60   print continuously, every 60 seconds to raw datafile

 FIELDS:
  #01 timestamp  : seconds since Epoch, time (default 60s)
  #02 hostname   : hostname
  #03 hdw        : machine hardware name
  #04 model      : CPU model name
  #05 hypervisor : name of the hypervisor, string
  #06 os         : name of the operating system, string
  #07 relos      : release number of operating system, string
  #08 kernel     : kernel version and release number
  #09 pcpu       : number of physical installed CPUs, number
  #10 cores      : number of physical CPU cores , number
  #11 vcpu       : number of virtual CPUs, number
  #12 ht         : hyper-threading: 0(OFF)/1(ON)/NA, string
  #13 memtotal   : total physical memory installed in MB, number
  #14 swaptotal  : total physical swap installed in MB, number
  #15 disks      : total number of disks, number
  #16 diskspace  : total GB across all disks, number
  #17 nics       : total number of NICs, number
  #18 uptime     : how long the system has been running, number
  #19 ips        : IP interface settings, string
  #20 version    : data recorders release number, string 
END
    exit 0;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
hdwrec: 1.2.2, 2022-04-04 2308
END
    exit 0;
}
