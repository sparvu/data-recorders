#!/opt/kronometrix/perl/bin/perl

# Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Getopt::Std;
use Time::HiRes qw(time sleep alarm setitimer ITIMER_REAL);
use POSIX qw(pause);
use Tie::IxHash;
use List::Util 'first';
#use Benchmark ':hireswallclock';
#use Data::Dumper;

###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hlvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [interval [count]],
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

###  Variables
my $loop      = 0;                  # current loop number
$main::opt_h  = 0;                  # help option
$main::opt_l  = 0;                  # logging option
$main::opt_V  = 0;                  # revision option
my $cfile     = 'rs485rec.json';    # configuration file
my $kfile     = 'kronometrix.json'; # configuration file
my $tp        = 0;                  # time precision
my $range     = 0;                  # serial range address config
my $char_time = 0;                  # serial char timeout
my ($cdata, $kdata);                # configuration data
my ( $baselog, $curlog, $rlog);

local $| = 1;

### MAIN BODY #

# Set a timer
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .2, .2 );

### 0.2sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

# we need all info
# read rs485rec configuration
$cdata = open_config($cfile);

my $log;

# workloads
tie my %devices, "Tie::IxHash";
%devices = get_devices($cdata);

# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rlog = $baselog . "/rs485rec.log";
    $log = open_file($rlog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

# get it as verbose
if($verbose) {
    if ($logging) {
        my $ndev = keys %devices;
        print $log "Total devices: $ndev";
    } else {
        my $ndev = keys %devices;
        print "Total devices: $ndev";
    }
}


# main loop
while (1) {
 
    # multiple clients running on different protocols
    my ($client_apoll, $client_mrtu, $client_mascii);

    for my $key (keys %devices) {

        my $value = $devices{$key};

        my ($rawfile, $devname, $devid, $port, $baudrate, $parity, 
            $stopbits, $databits, $timeout, $proto, 
            $cmd, $crc, $som, $sor, $rsp, $eor, $eom, $func, $arange, $desc) = split( /\^/, $key );

        my @values = split( /\^/, $value );

        if ($proto eq 'ascii-polled') {

            if (defined $client_mrtu) {

                $client_mrtu->disconnect;

            } elsif (defined $client_mascii) {

                $client_mascii->disconnect;
            }

            eval {

                if (! defined $client_apoll) {
                    $client_apoll = init_apoll($port, $baudrate, $parity, $stopbits, $databits);
                }

                exec_apoll($client_apoll, $rawfile, $devname, $devid, 
                           $port, $baudrate, $parity, $stopbits, $databits, 
                           $timeout, $cmd, $crc, $som, $sor, $rsp, $eor, $eom, @values);
            
                sleep 0.2;

            };

        } elsif ($proto eq 'modbus-rtu') {


            if (defined $client_apoll) {
                #$client_apoll->purge_all;
                $client_apoll->close;
                sleep 0.2;

            } elsif (defined $client_mascii) {

                $client_mascii->disconnect;
                sleep 0.2;
            }

            eval {

                if (! defined $client_mrtu) {
                    $client_mrtu = init_mrtu($port, $baudrate, $parity, $stopbits, $databits, $timeout);
                }

                exec_modbus($client_mrtu, $rawfile, $devname, $devid, $func, $arange, @values);

            };


        } elsif ($proto eq 'modbus-ascii') {

            if (defined $client_apoll) { 
                #$client_apoll->purge_all;
                #undef $client_apoll;
                $client_apoll->close;
                sleep 0.2;

            } elsif (defined $client_mrtu) {

                $client_mrtu->disconnect;
                sleep 0.2;
            }

            eval {

                if (! defined $client_mascii) {
                    $client_mascii = init_mascii($port, $baudrate, $parity, $stopbits, $databits, $timeout);
                }

                exec_modbus($client_mascii, $rawfile, $devname, $devid, $func, $arange, @values);

            };

        }

        if ($@) {
            if ($logging) {
                write_log ("error processing $devname: $!");
            } else {
                print "error processing $devname: $!\n";
            }
        }
    }

 
    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;
}


### Subroutines
## configuration file

# open JSON configuration file
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# get device defintion 
#
sub get_devices {

    my ($data) = @_;
    tie my %devs, "Tie::IxHash";

    my @proto = ('ascii-polled', 'modbus-ascii', 'modbus-rtu');

    for my $protocol (@proto) {

        # skip protocols if not defined
        next if (! defined $data->{$protocol});

        my @temp = @{ $data->{$protocol} };

            my $port = 'NA';
            my $baudrate = 'NA';
            my $parity   = 'NA';
            my $databits = 'NA';
            my $stopbits = 'NA';
            my $timeout  = 'NA';

        for my $f (@temp) {
            my ($sid, $tid, $dsid);

            $port      = $f->{'port'};
            $baudrate  = $f->{'baudrate'};
            $timeout   = $f->{'timeout'};
            $parity    = $f->{'parity'};

            # databits
            if (defined $f->{'databits'}) {
                $databits = $f->{'databits'};
            }

            $stopbits  = $f->{'stopbits'};

            my @lmoids = ('iaqd', 'aq', 'amd', 'wcd');

            for my $lmoid (@lmoids) {
                next if (! defined $f->{$lmoid});
                my @reqs = @{ $f->{$lmoid} };

                for my $dev (@reqs) {

                    my $rng_register;
                    my $rng_length;
                    my $mf  = 'NA';
                    my $crc = 'NA';
                    my $cmd = 'NA';
                    my $som = 'NA';
                    my $sor = 'NA';
                    my $rsp = 'NA';
                    my $eor = 'NA';
                    my $eom = 'NA';

                    my $unit    = $dev -> {'unit'};
                    my $vendor  = $dev -> {'vendor'};
                    my $model   = $dev -> {'model'};

                    # check for modbus parameters
                    if (defined $dev->{'function'}) {
                        $mf = $dev->{'function'};
                    }

                    # check for ascii command
                    if (defined $dev->{'command'}) {
                        $cmd = $dev->{'command'};

                        if ($dev->{'checksum'}) {
                            $crc = $dev->{'checksum'};
                        }

                        if ($dev->{'message_start'}) { 
                            $som = $dev->{'message_start'};
                        }

                        if ($dev->{'record_start'}) { 
                            $sor = $dev->{'record_start'};
                        }

                        if ($dev->{'record_sep'}) { 
                            $rsp = $dev->{'record_sep'};
                        }

                        if ($dev->{'record_end'}) { 
                            $eor = $dev->{'record_end'};
                        }

                        if ($dev->{'message_end'}) { 
                            $eom = $dev->{'message_end'};
                        }
                    }

                    # check for modbus range filter
                    if (defined $dev->{'range'}) {
                        $rng_register = $dev->{'range'}->{'register'};
                        $rng_length = $dev->{'range'}->{'length'};
                        $range = $rng_register . '-' . $rng_length;
                    }

                    my $k=0;
                    my $params;

                    my @metrix = @{ $dev->{'data'} };
                    for my $dt (@metrix) {
                        my ($dname, $dtype);
                        my $dreg; my $dlen; my $dcor='NA'; my $dfct;

                        if ( $dt -> {'type'} eq 'uint16'   or
                             $dt -> {'type'} eq 'int16'    or
                             $dt -> {'type'} eq 'floatinv' or
                             $dt -> {'type'} eq 'string'   or 
                             $dt -> {'type'} eq 'unixtime' ) {

                            $dname = $dt -> {'name'};
                            $dtype = $dt -> {'type'};

                            if(defined $dt -> {'register'}) {
                                $dreg = $dt -> {'register'};
                            }

                            if(defined $dt -> {'length'}) {
                                $dlen = $dt -> {'length'};
                            }

                            if(defined $dt -> {'factor'}) {
                                $dfct = $dt -> {'factor'};
                            }

                            if(defined $dt -> {'correction'}) {
                                $dcor = $dt -> {'correction'};
                            }
                            
                            if (defined $dreg and
                                defined $dlen and
                                defined $dfct ) {
                            
                                $dname .=  '_' . $dtype . '_' . $dreg . '_' . $dlen . '_' . $dfct . '_' . $dcor;

                            } else {

                                $dname .=  '_' . $dtype;
                            }

                        } elsif ( $dt -> {'type'} eq 'virtual' ) {

                            $dname = $dt -> {'name'};
                            $dtype = $dt -> {'type'};
                            my $did = $dt -> {'id'};
                            my @args = @{ $dt->{'args'} };
                            $dname .=  '_' . $dtype . '_' . $did . '_'  . join("_", @args);

                        } elsif ( $dt -> {'type'} eq 'NA' ) {

                            $dname = $dt -> {'name'};
                            $dtype = $dt -> {'type'};
                            $dname .=  '_' . $dtype;
 
                        } else { next; }
    
                        if ($k > 0) {
                            $params .= '^' . $dname;
                        } else {
                            $params .= $dname;
                        }
    
                        $k++;
                    }

                    my $rfile = $lmoid . '_' . $model . 'rec';
                    my $devname = $model . '_' . $unit;
                    my $keyapp = $rfile . '^' . $devname . '^'  . $unit . '^' . $port . '^' . $baudrate . '^' . $parity . '^' . $stopbits . '^' . $databits . '^' . $timeout . '^' . $protocol . '^' . $cmd . '^' . $crc . '^' . $som . '^' . $sor . '^' . $rsp . '^' . $eor . '^' . $eom . '^' . $mf . '^' . $range . '^' . $vendor;
                    my $hvalue = $params;
                    $devs{$keyapp} = $hvalue;
                }

            } # iaqd, aq, amd, wcd
        }
    }

    return %devs;
}


# init ascii-polled devices
#
sub init_apoll {

    my ($port, $baudrate, $parity, $stopbits, $databits) = @_;
    my $c;

    use Device::SerialPort;

    if (defined $databits) {

        $c = new Device::SerialPort($port);

        $c->databits($databits);
        $c->baudrate($baudrate);
        $c->parity($parity);
        $c->stopbits($stopbits);
        $c->handshake('none');
        #$c->stty_onlcr(1);

        $char_time = 
            1000*($c->databits+$c->stopbits+1)/$c->baudrate;

        $c->read_char_time($char_time);
        if ($c->baudrate < 19200) { 
            $c->read_const_time(3.5 * $char_time);
        } else {
            $c->read_const_time(1.75);
        }

        $c->write_settings;

    } else {

        $c = new Device::SerialPort($port);

        $c->baudrate($baudrate);
        $c->parity($parity);
        $c->stopbits($stopbits);
        $c->handshake('none');
        #$c->stty_onlcr(1);

        $char_time =
            1000*($c->databits+$c->stopbits+1)/$c->baudrate;

        $c->read_char_time($char_time);
        if ($c->baudrate < 19200) {
            $c->read_const_time(3.5 * $char_time);
        } else {
            $c->read_const_time(1.75);
        }

        $c->write_settings;
    }

    # return client
    return $c;
}


# init modbus-rtu devices
#
sub init_mrtu {

    my ($port, $baudrate, $parity, $stopbits, $databits, $timeout) = @_;
    my $c;

    use Device::Modbus::RTU::Client;

    if (defined $databits and $databits ne 'NA') {
        $c = Device::Modbus::RTU::Client->new( port     => $port,
                                              baudrate => $baudrate,
                                              timeout  => $timeout,
                                              parity   => $parity,
                                              databits => $databits,
                                              stopbits => $stopbits
                                             );
    } else {
        $c = Device::Modbus::RTU::Client->new( port     => $port,
                                               baudrate => $baudrate,
                                               timeout  => $timeout,
                                               parity   => $parity,
                                               stopbits => $stopbits
                                             );
    }

    # return client
    return $c;
}


# init modbus-ascii devices
#
sub init_mascii {

    my ($port, $baudrate, $parity, $stopbits, $databits, $timeout) = @_;
    my $c;

    use Device::Modbus::ASCII::Client;

    if (defined $databits and $databits ne 'NA') {
        $c = Device::Modbus::ASCII::Client->new( port     => $port,
                                                 baudrate => $baudrate,
                                                 timeout  => $timeout,
                                                 parity   => $parity,
                                                 databits => $databits,
                                                 stopbits => $stopbits
                                               );
    } else {
        $c = Device::Modbus::ASCII::Client->new( port     => $port,
                                                 baudrate => $baudrate,
                                                 timeout  => $timeout,
                                                 parity   => $parity,
                                                 stopbits => $stopbits
                                               );
    }       

    # return client
    return $c;
}


# fetches a single register value
#
sub getdata_modbus {

    my ( $client, $modbus_id, $modbus_f, $adrange, $type, $address, $quantity, $factor, $corr ) = @_;
    my $rvalue;

    # MODBUS FUNCTION 3
    if ( $type ne 'NA' ) {

        if ( $modbus_f == 3 ) {

            my $req = $client->read_holding_registers( unit     => $modbus_id,
                                                       address  => $address,
                                                       quantity => $quantity);
            $client->send_request($req);
            my $resp = $client->receive_response;

            if ( $type eq 'uint16' ) {

                $rvalue = sprintf ("%.2f", $resp->{message}->{values}->[0] * $factor);

            } elsif ( $type eq 'int16' ) {

                $rvalue = sprintf ("%.2f", uint16_int16($resp->{message}->{values}->[0]) * $factor);

            } elsif ( $type eq 'floatinv' ) {

                $rvalue  = sprintf ("%.2f", unpack 'f', pack 'v*',
                                            reverse @{ $resp->{message}->{values} } );
            }
        }

        # MODBUS FUNCTION 4
        elsif ( $modbus_f == 4 ) {
        
            my $req = $client->read_input_registers( unit     => $modbus_id,
                                                     address  => $address,
                                                     quantity => $quantity);
            $client->send_request($req);
            my $resp = $client->receive_response;

            if ( $type eq 'uint16' ) {

                $rvalue = sprintf ("%.2f", $resp->{message}->{values}->[0] * $factor);

            } elsif ( $type eq 'int16' ) {

                $rvalue = sprintf ("%.2f", uint16_int16($resp->{message}->{values}->[0]) * $factor);

            } elsif ( $type eq 'floatinv' ) {

                $rvalue  = sprintf ("%.2f", unpack 'f', pack 'v*', 
                                            reverse @{ $resp->{message}->{values} } );

            }
        }

        # check for field correction

        if ($corr ne 'NA') {

            my $cf = substr($corr, 0, 1);
            my $cv = substr($corr, 1);
    
            if ($cf eq '+') {

                $rvalue += $cv;

            } elsif ($cf eq '-') {

                $rvalue -= $cv;

            } elsif ($cf eq '*') {

                $rvalue *= $cv;

            } elsif ($cf eq '/') {

                $rvalue = sprintf ("%.2f", $rvalue /= $cv);

            }
        }

    } else {

        $rvalue = 'NA' ;
    }

    # return register single value
    return $rvalue;
}


sub fmtdata {

    my ( $srdr, $dtype, $daddr, $dlen, $dfactor, @buf ) = @_;
    my $rvalue ;
 
    my $kadrs = $daddr - $srdr;
    my $kadre = $kadrs + $dlen - 1;

    #print "@buf\n";
    #print "kadrs=$kadrs kadre=$kadre length=$dlen\n";
    my @rdata = @buf[$kadrs..$kadre];

    if ( $dtype eq 'uint16' ) {

        $rvalue = sprintf ("%.2f", "@rdata" * $dfactor);

    } elsif ( $dtype eq 'int16' ) {

        $rvalue = sprintf ("%.2f", uint16_int16("@rdata") * $dfactor);

    } elsif ( $dtype eq 'floatinv' ) {

        $rvalue = sprintf ("%.2f", unpack 'f', pack 'v*', reverse @rdata );
    }

    return $rvalue;
}


# fetches a single register value
#
sub getrdata_modbus {

    my ( $client, $modbus_id, $modbus_f, $adrange ) = @_;
    my $rvalue = 'NA';

    my ($address, $quantity) = split("-",  $adrange);

    # MODBUS FUNCTION 3
    if ( $modbus_f == 3 ) {

        my $req = $client->read_holding_registers( unit     => $modbus_id,
                                                   address  => $address,
                                                   quantity => $quantity);

        $client->send_request($req);
        my $resp = $client->receive_response;

        $rvalue = "@{$resp->{message}->{values}}";

    }
    # MODBUS FUNCTION 4
    elsif ( $modbus_f == 4 ) {

        my $req = $client->read_input_registers( unit     => $modbus_id,
                                                 address  => $address,
                                                 quantity => $quantity);
        $client->send_request($req);
        my $resp = $client->receive_response;

        $rvalue = "@{$resp->{message}->{values}}";

    }

    # return all values as single record
    return $rvalue;
}


sub getserial {

    my ($client, $command, $endrecord, $tout) = @_;

    my $rec;
    #my $c    = 0;
    my $data = "";

    $client->purge_all;
    # send command to device
    $client->write($command);

    my $buffer  = '';
    my $bytes   = 0;
    my $timeout = 1000 * $tout; # Turn to milliseconds
    do {
        my $read;
        ($bytes, $read) = $client->read(255);
        $data  .= $read;
        $timeout -= $client->read_const_time + 255 * $char_time;
    } until ($timeout <= 0 || ($bytes == 0 && length($data) > 0) || ($data =~ /$endrecord/));

    if ($timeout <= 0) {
        if ($logging) {
            write_log ("Error processing command:$command, read timeout");
        } else {
            print "Error processing command:$command, read timeout\n";
        }
    }

    $data =~ s/[\n\r]//g;

    return $data;
}


# fetches values using ascii polled
#
sub getdata_apoll {

    my ( $client, $model, $timeout, $cmd, $crc,
         $som, $sor, $rsp, $eor, $eom ) = @_;

    my $record    = "";
    my $rvalue    = 'NA';
    my $endrec    = '\n';
    my $msg_cksum = 'NA';

    my ($dev_model, $dev_id) = split( /_/, $model );

    # analyse end of record for CRLF
       if ($eor eq 'CRLF') { $endrec = '\r\n'; }
    elsif ( $eor eq 'CR' ) { $endrec = '\r';   }
    elsif ( $eor eq 'LF' ) { $endrec = '\n';   }

    # Analyse command for CRLF, CR, LF
    if ( $cmd =~ /CRLF/ ) {
        my $ecmd = substr($cmd, -4);
        if ( $ecmd eq 'CRLF' ) {
            my $ncmd = substr($cmd, 0, -4);
            $cmd = $ncmd . "\r\n";
        } elsif ( $ecmd eq 'CR' ) {
            my $ncmd = substr($cmd, 0, -2);
            $cmd = $ncmd . "\r";
        } elsif ( $ecmd eq 'LF' ) {
            my $ncmd = substr($cmd, 0, -2);
            $cmd = $ncmd . "\n";
        }
    }

    $record = getserial ($client, $cmd, $endrec, $timeout);

    if ($logging) {
        if ($verbose) {
            print $log " raw data-> $record\n";
        }
    } else {
        if ($verbose) {
            print " raw data-> $record\n";
        }
    }

    if (defined $record) {

        # check for message checksum
        if ($crc eq 'yes') {
     
            # QML201 Model Checksum 
            if ($dev_model =~ 'qml201' ) {

                my $vck = qml201_msgck($record);

                if ( $vck == 1 ) {

                    $rvalue = substr($record, 0, -5);

                } else {

                    if ($logging) {
                        write_log ("Data message checksum error ,retrying...");
                    } else {
                        print "Data message checksum error, retrying...\n";
                    }

                    sleep 3;
                    $record = getserial ($client, $cmd, $endrec, $timeout);

                    $vck = qml201_msgck($record);

                    if ( $vck == 1 ) {

                        $rvalue = substr($record, 0, -5);

                    }
                }

            # WXT520 Weather transmitter
            } elsif ( $dev_model eq 'wxt520' ) {

                my $vck = wxt520_msgck($record);
                if ( $vck == 1 ) {

                    $rvalue = substr($record, 0, -3);

                } else {

                    if ($logging) {
                        write_log ("Data message checksum error, retrying...");
                    } else {
                        print "Data message checksum error, retrying...\n";
                    }

                    sleep 3;
                    $record = getserial ($client, $cmd, $endrec, $timeout);
 
                    $vck = wxt520_msgck($record);

                    if ( $vck == 1 ) {

                        $rvalue = substr($record, 0, -3);
                    }
                }
            }

        } else {

            $rvalue = $record;
        }
    }

    # return all values as single record
    return $rvalue;
}


# format ascii-polled data
#
sub fmtdata_apoll {

    my ( $dname, $dtype, $idx, @buf ) = @_;
    my $rvalue ;
    
    if ( $dtype eq 'string' ) {

        # device type: metric=value (WXT520)
        if ( grep( /=/, @buf ) ) {

            # match metrix name
            my $match = first { /$dname/i } @buf;

            # fetch the value
            $rvalue = $match =~ s/^.*=//gr;

            # handle unit value
            my $tr = $rvalue;
            my $lchar = chop($tr);
            if ($lchar ne '#') {

                $rvalue = substr($rvalue, 0, -1);
               
            } else { 

                $rvalue = 'NA';
            }

        # device type: value (HMP, QML201)
        } else {

            # we will use rbuf index
            $rvalue = $buf[$idx];
        }

    } elsif ( $dtype eq 'unixtime' ) {

        # we will use rbuf index
        $rvalue = $buf[$idx];

    } else {

        $rvalue = 'NA';
    }

    return $rvalue;
}



# execute ASCII POLLED communication
#
sub exec_apoll {

    my ( $dclient, $rawfile, $dname, $did, 
         $dport, $dbaudrate, $dparity, $dstopbits, $ddatabits,
         $dtimeout, $dcmd, $dcrc, $dsom, $dsor, $drsp, $deor, $deom, @vals ) = @_;

    tie my %metrix, "Tie::IxHash";

    my $val;
    my $fval;

    if ($logging) {
        if ($verbose) {
            print $log "\nData message\n";
            print $log " port: $dport\n";
            print $log " baudrate:$dbaudrate databits:$ddatabits parity:$dparity stopbits:$dstopbits\n";
            print $log " krd:'$rawfile'\n dev:'$dname' id:'$did'\n cmd:'$dcmd' checksum:'$dcrc'\n";
            print $log " som:'$dsom' sor:'$dsor' sep:'$drsp' eor:'$deor' eom:'$deom'\n";
            print $log ("Parameters\n");
            foreach (@vals) {
                print $log " $_\n";
            }
            print $log "Values\n";
        }
    } else {
        if ($verbose) {
            print "\nData message\n";
            print " port: $dport\n";
            print " baudrate:$dbaudrate databits:$ddatabits parity:$dparity stopbits:$dstopbits\n";
            print " krd:'$rawfile'\n dev:'$dname' id:'$did'\n cmd:'$dcmd' checksum:'$dcrc'\n";
            print " som:'$dsom' sor:'$dsor' sep:'$drsp' eor:'$deor' eom:'$deom'\n";
            print "Parameters\n";
            foreach (@vals) {
                print " $_\n";
            }
            print "Values\n";
        }
    }

    my $treq = time;

    my @rbuf;

    # used by fmtdata apoll index based devices
    my $rbufidx = 0;

    # process every metrix defined in msg
    for my $metric (@vals) {
        my @v = split("_",  $metric);

        # metric name
        # $v[0];
 
        if ( $v[1] eq 'virtual' ) {

            # virtual data type
            my $vf = $v[2];

            # check metrix buffer
            my @fname_args = @v[3..$#v];

            my ($temp, $humidity);

            for my $fa (@fname_args) {

                if ( $fa eq 'ta' ) {

                    if (exists $metrix{$fa}) {
                        my $arg = $metrix{$fa};
                        $temp = $arg;
                     }
                
                 } elsif ($fa eq 'rh' or $fa eq 'ua') {
        
                     if (exists $metrix{$fa}) {
                         my $arg = $metrix{$fa};
                         $humidity = $arg;
                     }
                 } 
            }

            # virtual function list: dewpoint, dewpoint_wmo, lcl
            if ($vf eq 'dewpoint' ) {

                if ($temp ne 'NA' or $humidity ne 'NA') {

                    $val = sprintf ("%.2f", dewpoint($temp, $humidity) );

                } else {

                    $val='NA';

                }

            } elsif ($vf eq 'dewpointWMO' ) {

                if ($temp ne 'NA' and $humidity ne 'NA') {

                    $val = sprintf ("%.2f", dewpoint_wmo($temp, $humidity) );

                } else {

                    $val='NA';

                }

            } elsif ($vf eq 'lcl' ) {

                if ($temp ne 'NA' and $humidity ne 'NA') {

                    $val = sprintf ("%.2f", lcl($temp, $humidity) );

                } else {

                    $val = 'NA';

                }

            } else { next; }

        } else {

            # make the ascii call, one call
            if (! defined $rbuf[0]) {

                my $rval = getdata_apoll($dclient, $dname, $dtimeout, $dcmd,
                                         $dcrc, $dsom, $dsor, $drsp, 
                                         $deor, $deom );

                if (defined $rval) {
                    @rbuf = split ($drsp, $rval);
                } else { return; }
            }
           
            $val = fmtdata_apoll($v[0], $v[1], $rbufidx, @rbuf);
        }

        # all metrix buffer        
        if (defined $val) {
            $metrix{$v[0]} = $val;
        }

        if ($logging) {
            print $log (" $v[0] -> $val\n") if ($verbose);
        } else {
            print " $v[0] -> $val\n" if ($verbose);
        }
      
        $val = 'NA' if (! defined $val);
        $fval .=  ':' . $val;

        $rbufidx++;
    }

    if ($logging) {

        # set krd raw file
        $rawfile = $curlog . "/" . $rawfile . ".krd";

        print $log (" rawfile=$rawfile\n") if ($verbose);

        my $rawkrd = open_file($rawfile);
        printf $rawkrd "%.${tp}f:%s%s\n", time, $dname, $fval;
        close ($rawkrd);

    } else {

        printf "%.${tp}f:%s%s\n", time, $dname, $fval;

    }
}



# execute MODBUS communication
#
sub exec_modbus {

    my ( $modbus_p, $rawfile, $name, $modbus_id, $modbus_f, $adrange, @vals ) = @_;

    tie my %metrix, "Tie::IxHash";

    my $val;
    my $fval;

    if ($logging) {
        if ($verbose) {
            print $log ("\nData message\n");
            print $log (" krd:'$rawfile'\n dev:'$name' unit id:'$modbus_id'\n function:'$modbus_f' range:'$adrange'\n");
            print $log ("Parameters\n");
            foreach (@vals) {
                print $log " $_\n";
            }
        }
    } else {
        if ($verbose) {
            print ("\nData message\n");
            print (" krd:'$rawfile'\n dev:'$name' unit id:'$modbus_id'\n function:'$modbus_f' range:'$adrange'\n");
            print ("Parameters\n");
            foreach (@vals) {
                print " $_\n";
            }
        }
    }
 
    my $treq = time;
    #$fval .= $treq . ':' . $name;

    # keeps address range buffer
    my ($sradr, $lradr)   = split('-', $adrange);            
    my @rbuf;

    for my $metric (@vals) {
        my @v = split("_",  $metric);

        # metric name
        # $v[0];
      
        if ( $v[1] eq 'virtual' ) {

            # virtual data type
            my $vf = $v[2];

            # check metrix buffer
            my @fname_args = @v[3..$#v];

            my ($temp, $humidity);

            for my $fa (@fname_args) {

                if ( $fa eq 'ta' ) {

                    if (exists $metrix{$fa}) {
                        my $arg = $metrix{$fa};
                        $temp = $arg;
                     }
                
                 } elsif ( $fa eq 'rh' ) {
        
                     if (exists $metrix{$fa}) {
                         my $arg = $metrix{$fa};
                         $humidity = $arg;
                     }
                 }
            }

            # virtual function list: dewpoint, dewpoint_wmo, lcl
            if ($vf eq 'dewpoint' ) {

                if ($temp ne 'NA' or $humidity ne 'NA') {

                    $val = sprintf ("%.2f", dewpoint($temp, $humidity) );

                } else { 

                    $val='NA';

                }

            } elsif ($vf eq 'dewpointWMO' ) {

                if ($temp ne 'NA' and $humidity ne 'NA') {

                    $val = sprintf ("%.2f", dewpoint_wmo($temp, $humidity) );

                } else { 

                    $val='NA';

                }
 
            } elsif ($vf eq 'lcl' ) {

                if ($temp ne 'NA' and $humidity ne 'NA') {

                    $val = sprintf ("%.2f", lcl($temp, $humidity) );
                
                } else {

                    $val = 'NA';

                }
 
            } else { next; }

        } else {

            # numeric data types, get values
            # multiple calls
            if ($adrange eq 0) {

                $val = getdata_modbus($modbus_p, $modbus_id, $modbus_f, $adrange, $v[1], $v[2], $v[3], $v[4], $v[5]);

            # single call, one value buffer
            } else {

                if (! defined $rbuf[0]) {
                    my $rval = getrdata_modbus($modbus_p, $modbus_id, $modbus_f, $adrange);
                    @rbuf = split (' ', $rval);
                }

                $val = fmtdata($sradr, $v[1], $v[2], $v[3], $v[4], @rbuf);

            }
        }

        # all metrix buffer        
        $metrix{$v[0]} = $val;

        if ($logging) {
            print $log (" $v[0] -> $val\n") if ($verbose);
        } else {
            print " $v[0] -> $val\n" if ($verbose);
        }
       
        $fval .=  ':' . $val;
    }

    if ($logging) {

        # set krd raw file
        $rawfile = $curlog . "/" . $rawfile . ".krd";

        print $log (" rawfile=$rawfile\n") if ($verbose);

        my $rawkrd = open_file($rawfile);
        printf $rawkrd "%.${tp}f:%s%s\n", time, $name, $fval;
        close ($rawkrd);

    } else {

        printf "%.${tp}f:%s%s\n", time, $name, $fval;

    }
}


# Changes from unsigned int to signed int
# used to convert different MODBUS values to signed int
#
sub uint16_int16 {
  my $v = shift;
  return ($v & 0x8000) ? -((~$v & 0xffff) + 1) : $v;
}


# Returns dewpoint (Td) based on temperature & humidity
# http://en.wikipedia.org/wiki/Dew_Point
#
sub dewpoint {
    my $temp = shift;
    my $humidity = shift;
    $humidity /= 100.0;
    my $gamma = (17.271 * $temp) / (237.7 + $temp) + log($humidity) ;
    return (237.7 * $gamma) / (17.271 - $gamma);
}


# Returns dewpoint (Td) according with CIMO Guide-7th_Edition-2008
# based on temperature and humidity 
#
sub dewpoint_wmo {
    my $temp = shift;
    my $humidity = shift;
    my $c1 = 243.12;
    my $c2 = 17.62;
    my $g1 = $humidity * exp(($c2 * $temp) / ($c1 + $temp));
    my $gamma = log($g1 / 100);
    return ($c1 * $gamma) / ($c2 - $gamma);
}


# Returns lifted condensation level (lcl) based on temperature & humidity
# http://en.wikipedia.org/wiki/Lifted_condensation_level
# 
sub lcl {
    my $temp = shift;
    my $humidity = shift;
    my $lcl = (20 + ($temp / 5)) *  (100 - $humidity);
    return $lcl;
}


# Vaisala QML201 data logger
# Message Check Verification
#
sub qml201_msgck {

    my $data = "@_";
    my $rdata = 0;

    my $m = substr($data, -4);
    my $t = substr($data, 0, -4);
    my $n = qml201_crc16($t);

    if ( $m eq $n ) {

        $rdata = 1;

    } else {

        $rdata = 0;
    }

    return $rdata;
}


# Vaisala QML201 data logger
# CRC16 CRC-CCITT (XModem)
#
sub qml201_crc16 {
    my ($string) = @_;
    my $poly = 0x1021;
    my $crc = 0;
    for my $c ( unpack 'C*', $string ) {
        $crc ^= ( $c << 8 );
        for ( 0 .. 7 ) {
            my $carry = $crc & 0x8000;
            $crc <<= 1;
            $crc ^= $poly if $carry;
        }
    }
    $crc &= 0xffff;
    return sprintf("%04X", $crc);
}


# Vaisala WXT520 transmitter
# Message Check Verification
#
sub wxt520_msgck {
  
    my $data = "@_";
    my $rdata = 0;

    my $m = substr($data, -3);
    my $t = substr($data, 0, -3);
    my $n = wxt520_crc16($t);

    if ( $m eq $n ) {
    
        $rdata = 1;
    
    } else {
 
        $rdata = 0;
    }       

    return $rdata;
}

# Vaisala WXT520 transmitter
# CRC16
#
sub wxt520_crc16 {
    my ($string) = @_;

    my $crc = 0;
    for my $c (split //, $string) {
        $crc = $crc ^ ord($c);
        for(my $i=0; $i < 8; $i++) {
            if($crc & 1) {
                $crc = $crc >> 1;
                $crc = $crc ^ hex '0xA001';
            } else {
                $crc = $crc >> 1;
            }
        }
    }

    my $c1 = hex '0x40' | ($crc >> 12);
    my $c2 = hex '0x40' | (($crc >> 6) & hex '0x3F');
    my $c3 = hex '0x40' | ($crc & hex '0x3f');
    my $result = chr($c1) . chr($c2) . chr($c3);

    return $result;
}


## auxiliares

# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
	  die "error: open_file - cannot open $file $!";
	seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
	  die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


# usage - print usage and exit
#
sub usage {
    print STDERR <<END;
USAGE: rs485rec [-hlvV] | [interval [count]]
 e.g. rs485rec 60     print continuously, every 60 seconds, to STDOUT
      rs485rec 60 5   print 5 times, every 60 seconds, to STDOUT
      rs485rec -l 60  print continuously, every 60 seconds to raw datafile
      rs485rec -V     print recorder revision 

OPTIONS:
  -h        : help information
  -l        : log raw data to krd file, no STDOUT
  -v        : verbose information
  -V        : release version
  interval  : maximum number of seconds between samples
END
    exit 0;
}

# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
Serial communication data recorder for RS232, RS422, RS485
Industrial IoT, Weather and Environment
rs485rec: 1.4.1, 2021-02-10 0006
END
    exit 0;
}
