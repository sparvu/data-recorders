#!/opt/kronometrix/perl/bin/perl

# Copyright (c) 2009-2022 Stefan Parvu (gitlab.com/sparvu)
# Initial Author: Stefan Parvu
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Getopt::Std;
use File::stat;
use File::Find;
no warnings 'File::Find';
use Filesys::DiskUsage qw(du);
use Tie::IxHash;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use POSIX qw(pause);

###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hlvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [interval [count]],
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

###  Variables
my $loop = 0;                          # current loop number
$main::opt_h = 0;                      # help option
$main::opt_V = 0;                      # revision option
my $cfile = 'direc.json';              # configuration file
my $cdata;                             # configuration data
my $tp = 0;                            # time precision
my $kfile     = 'kronometrix.json';    # configuration file
my $rawfile;                           # krd raw data file
my $kdata;                             # configuration data
my ($baselog, $curlog, $dirlog, $log); # logs
my $files;
my $dirs;

local $| = 1;


### MAIN BODY #

# Set a timer for WWW::Curl::Easy object
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .1, .1 );
#my $http = WWW::Curl::Easy->new;

### 0.1sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

# read configuration
$cdata = open_config($cfile);

# directories
tie my %work, "Tie::IxHash";
%work = get_dir($cdata);

# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rawfile = $curlog . '/' . 'direc' . '.krd';
    $dirlog = $baselog . "/direc.log";
    $log = open_file($dirlog);
    *STDERR = $log;

    write_log ("info: started");
}

# get it as verbose
if ($verbose) {
    if ($logging) {
        write_log ("Total workload requests: " . keys(%work) . ".\n");
    } else {
        print "Total workload requests: " . keys(%work) . ".\n";
    }
}


# main loop
while (1) {

    my $rawkrd;

    if ($logging) {
        $rawkrd = open_file($rawfile);
    }

    for my $key (keys %work) {
    
        $dirs=0;
        $files=0;
 
        my $value = $work{$key};
        my $desc = $value;
        next if ( ! -d $key);

        my $mod_time= stat($key)->mtime;
        my $chg_time= stat($key)->ctime;

        get_fds($key);

        my $size=0;
        my %sizes = du({'make-hash' => 1}, $key);
        foreach my $entry (sort { $sizes{$a} <=> $sizes{$b} } keys %sizes) {

            if ($sizes{$entry}) {
                $size = sprintf ("%.f", $sizes{$entry});
            }
            
        }

        $key =~ s/^\///;
        $key =~ s/\//_/g;

        my $msize = sprintf ("%.2f", $size / (1024*1024));

        if ($logging) {
            printf $rawkrd "%.${tp}f:%s:%d:%d:%d:%d:%.2f\n", time, $key, $files, $dirs, $chg_time, $mod_time, $msize;
        } else {
            # print dir statistics
            printf "%.${tp}f:%s:%d:%d:%d:%d:%.2f\n", time, $key, $files, $dirs, $chg_time, $mod_time, $msize;
        }
        
    }

    # close krd rawdata file
    if ($logging) {
        close ($rawkrd);
    }

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;
}



### Subroutines


# open JSON configuration file
#
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


sub reload_config {

    write_log("info: main - signal HUP received, reload armed...");

    $cdata = open_config($cfile);

    ## hostid
    # get_hostid($cdata);

    ## appliance destination
    # %work = get_workload($cdata);

    return;
}


# get directory definition
sub get_dir {

    my ($data) = @_;
    tie my %dirs, "Tie::IxHash";

    my @temp;
    eval { @temp = @{ $data->{'directory'} }; };
    if ( $@ ) { die "Error: syntax error direc.json, check directory";  }
    
    foreach my $f (@temp) {

        my $dir     = $f->{'name'};
        my $desc    = $f->{'description'};

        # print "$dir => $desc \n";
        my $keyapp = $dir;
        my $hvalue = $desc;

        $dirs{$keyapp} = $hvalue;
    }

    return %dirs;
}


sub get_fds {

    my ($dir) = @_;
    local $^W;
    find(
        sub {
            # $_ contains the name of the current file
            # $File::Find::name contains the full path of the current file relative
            #  to the directory given to the find() function
            # $File::Find::dir contains the name of the current directory
            #print "Processing: $_ \n";

            if ( -d ) {  # if file is a directory
                $dirs++;
            } elsif ( -f ) {
                $files++;
            } else { return; }
        }, $dir);

    return;
}


## auxiliares

# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: direc [-hlvV] | [interval]
OPTIONS:
  -h        : help information
  -v        : verbose information
  -l        : log raw data to krd file, no STDOUT
  -V        : release version
  interval  : maximum number of seconds between samples

 FIELDS:
  #01 timestamp : seconds since Epoch, time
  #02 name : directory name, string
  #03 number of files, number
  #04 number of sub directories, number
  #05 time of last status change, time
  #06 time of last modification, time
  #07 real capacity in MBytes, number
 
 NOTES:
  The recorder uses direc.json configuration file
END
    exit 0;
}

# revision - print revision and exit
sub revision {
    print STDERR <<END;
direc: 1.1.4, 2022-05-30 1555
END
    exit 0;
}
